/** @module GatewayHandler */
import { ChannelHandler } from "./events/ChannelHandler";
import { ForumThreadHandler } from "./events/ForumThreadHandler";
import { MessageHandler } from "./events/MessageHandler";
import { GuildHandler } from "./events/GuildHandler";
import { WebhookHandler } from "./events/WebhookHandler";
import { DocHandler } from "./events/DocHandler";
import { CalendarHandler } from "./events/CalendarHandler";
import { ListItemHandler } from "./events/ListItemHandler";
import { AnnouncementHandler } from "./events/AnnouncementHandler";
import { UserHandler } from "./events/UserHandler";
import { Client } from "../structures/Client";
import type { GATEWAY_EVENTS } from "../Constants";
/** Gateway handler filters every ws events. */
export declare class GatewayHandler {
    readonly client: Client;
    constructor(client: Client);
    messageHandler: MessageHandler;
    channelHandler: ChannelHandler;
    forumThreadHandler: ForumThreadHandler;
    guildHandler: GuildHandler;
    webhookHandler: WebhookHandler;
    docHandler: DocHandler;
    calendarHandler: CalendarHandler;
    listItemHandler: ListItemHandler;
    announcementHandler: AnnouncementHandler;
    userHandler: UserHandler;
    readonly toHandlerMap: Record<keyof GATEWAY_EVENTS, (data: object) => void>;
    handleMessage(eventType: keyof GATEWAY_EVENTS, eventData: object): Promise<void>;
}
