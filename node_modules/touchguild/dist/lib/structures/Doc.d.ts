/** @module Doc */
import { Client } from "./Client";
import { Member } from "./Member";
import { Base } from "./Base";
import { DocComment } from "./DocComment";
import { APIDoc, APIDocComment, APIMentions } from "../Constants";
import { EditDocOptions } from "../types/doc";
import { JSONDoc } from "../types/json";
import TypedCollection from "../util/TypedCollection";
/** Doc represents an item of a "Docs" channel. */
export declare class Doc extends Base<number> {
    /** Guild/server id */
    guildID: string;
    /** ID of the 'docs' channel. */
    channelID: string;
    /** Doc name */
    name: string;
    /** Content of the doc */
    content: string;
    /** Doc mentions  */
    mentions: APIMentions;
    /** When the doc has been created. */
    createdAt: Date;
    /** ID of the member who created this doc. */
    memberID: string;
    /** When the doc has been updated. */
    editedTimestamp: Date | null;
    /** ID of the member who updated the doc. */
    updatedBy: string | null;
    comments: TypedCollection<number, APIDocComment, DocComment>;
    /**
     * @param data raw data
     * @param client client
     */
    constructor(data: APIDoc, client: Client);
    toJSON(): JSONDoc;
    protected update(data: APIDoc): void;
    /** Retrieve the member who executed this action.
     * Note: If this doc has been edited, the updatedBy id will be used to get you the member.
     */
    get member(): Member | Promise<Member>;
    /** Edit this doc.
     * @param options Edit options.
     */
    edit(options: EditDocOptions): Promise<Doc>;
    /** Delete this doc. */
    delete(): Promise<void>;
}
