/** @module RequestHandler */
import type { RESTManager } from "./RESTManager";
import SequentialBucket from "./SequentialBucket";
import { LatencyRef, RequestOptions } from "../types/request-handler";
import { RESTOptions } from "../types/client";
export declare class RequestHandler {
    #private;
    options: {
        agent: import("undici/types/agent").default | null | undefined;
        baseURL: string;
        disableLatencyCompensation: boolean;
        host: string;
        latencyThreshold: number;
        ratelimiterOffset: number;
        requestTimeout: number;
        userAgent: string | undefined;
    };
    globalBlock: boolean;
    latencyRef: LatencyRef;
    ratelimits: Record<string, SequentialBucket>;
    readyQueue: Array<() => void>;
    constructor(manager: RESTManager, options?: RESTOptions);
    private globalUnblock;
    authRequest<T = unknown>(options: Omit<RequestOptions, "auth">): Promise<T>;
    request<T = unknown>(options: RequestOptions): Promise<T>;
}
