"use strict";
/** @module Client */
/* eslint-disable @typescript-eslint/method-signature-style */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const tslib_1 = require("tslib");
const Guild_1 = require("./Guild");
const UserClient_1 = require("./UserClient");
const User_1 = require("./User");
const TextChannel_1 = require("./TextChannel");
const WSManager_1 = require("../gateway/WSManager");
const GatewayHandler_1 = require("../gateway/GatewayHandler");
const RESTManager_1 = require("../rest/RESTManager");
const TypedCollection_1 = tslib_1.__importDefault(require("../util/TypedCollection"));
const TypedEmitter_1 = tslib_1.__importDefault(require("../types/TypedEmitter"));
const Util_1 = require("../util/Util");
/** Represents the bot's client. */
class Client extends TypedEmitter_1.default {
    /** Gateway Handler. */
    #gateway;
    /** @param params Client's parameters, this includes bot's token & rest options. */
    constructor(params) {
        if (typeof params !== "object")
            throw new Error("The token isn't provided in an object.");
        if (!params?.token)
            throw new Error("Cannot create client without token, no token is provided.");
        super();
        this.params = {
            token: params.token,
            ForceDisableREST: params.ForceDisableREST ?? false,
            RESTOptions: params.RESTOptions,
            connectionMessage: params.connectionMessage ?? true,
            waitForCaching: params.waitForCaching ?? true,
            collectionLimits: {
                messages: params.collectionLimits?.messages ?? 100,
                threads: params.collectionLimits?.threads ?? 100,
                threadComments: params.collectionLimits?.threadComments ?? 100,
                docs: params.collectionLimits?.docs ?? 100,
                scheduledEvents: params.collectionLimits?.scheduledEvents ?? 100,
                scheduledEventsRSVPS: params.collectionLimits?.scheduledEventsRSVPS ?? 100,
                calendarComments: params.collectionLimits?.calendarComments ?? 100,
                docComments: params.collectionLimits?.docComments ?? 100,
                announcements: params.collectionLimits?.announcements ?? 100,
                announcementComments: params.collectionLimits?.announcementComments ?? 100
            }
        };
        this.ws = new WSManager_1.WSManager(this, { token: this.token, client: this });
        this.guilds = new TypedCollection_1.default(Guild_1.Guild, this);
        this.users = new TypedCollection_1.default(User_1.User, this);
        this.rest = (!this.params.ForceDisableREST ? new RESTManager_1.RESTManager(this, params.RESTOptions) : null);
        this.#gateway = new GatewayHandler_1.GatewayHandler(this);
        this.util = new Util_1.Util(this);
        this.startTime = 0;
    }
    /** Bot's token. */
    get token() {
        return this.params.token;
    }
    get uptime() {
        return this.startTime ? Date.now() - this.startTime : 0;
    }
    /** Connect to Guilded. */
    connect() {
        this.ws.connect();
        this.ws.on("GATEWAY_WELCOME", data => {
            this.user = new UserClient_1.UserClient(data, this);
            if (this.params.connectionMessage)
                console.log("> Connection established.");
            void this.rest.misc.getUserGuilds("@me").catch(() => [])
                .then(guilds => {
                if (!guilds)
                    guilds = [];
                for (const guild of guilds)
                    this.guilds.add(guild);
            });
            this.startTime = Date.now();
            this.emit("ready");
        });
        this.ws.on("disconnect", err => {
            this.startTime = 0;
            this.emit("error", err);
        });
        this.ws.on("GATEWAY_PARSED_PACKET", (type, data) => {
            void this.#gateway.handleMessage(type, data);
        });
    }
    /** Disconnect from Guilded.
     * @param crashOnDisconnect If set, throws an error to stop the process.
     */
    disconnect(crashOnDisconnect) {
        if (this.ws.alive === false)
            return console.warn("There is no open connection.");
        this.ws.disconnect(false); // closing all connections.
        console.log("The connection has been terminated.");
        if (crashOnDisconnect)
            throw new Error("Connection closed.");
    }
    /** This method is used to get a specific guild channel, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param channelID The ID of the channel to get from cache.
     */
    getChannel(guildID, channelID) {
        if (!guildID)
            throw new Error("guildID is a required parameter.");
        if (!channelID)
            throw new Error("channelID is a required parameter.");
        return this.guilds.get(guildID)?.channels.get(channelID);
    }
    /** This method is used to get a specific guild member, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to get.
     */
    getMember(guildID, memberID) {
        if (!guildID)
            throw new Error("guildID is a required parameter.");
        if (!memberID)
            throw new Error("memberID is a required parameter.");
        return this.getGuild(guildID)?.members.get(memberID);
    }
    /** This method is used to get a list of cached guild member.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID ID of the guild to get members.
     */
    getMembers(guildID) {
        if (!guildID)
            throw new Error("guildID is a required parameter.");
        return this.getGuild(guildID)?.members.map(member => member);
    }
    /**
     * Get guild member permissions.
     * @param guildID ID of the guild.
     * @param memberID ID of the member.
     */
    async getMemberPermission(guildID, memberID) {
        return this.rest.guilds.getMemberPermission(guildID, memberID);
    }
    /** Get a ban.
     * @param guildID ID of the guild.
     * @param memberID ID of the banned member.
     */
    async getBan(guildID, memberID) {
        return this.rest.guilds.getBan(guildID, memberID);
    }
    /** This method is used to get a list of guild ban.
     * @param guildID ID of the guild.
     */
    async getBans(guildID) {
        return this.rest.guilds.getBans(guildID);
    }
    /** Get a cached guild, returns `undefined` if not cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID The ID of the guild to get.
     */
    getGuild(guildID) {
        if (!guildID)
            throw new Error("guildID is a required parameter.");
        return this.guilds.get(guildID);
    }
    /** Get a channel's message, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID ID of the guild.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to get.
     */
    getMessage(guildID, channelID, messageID) {
        const channel = this.getChannel(guildID, channelID);
        if (channel instanceof TextChannel_1.TextChannel) {
            return channel?.messages.get(messageID);
        }
    }
    /** This method is used to get cached messages from a channel.
     * @param guildID ID of the guild.
     * @param channelID ID of a "Chat" channel.
     */
    getMessages(guildID, channelID) {
        const channel = this.getChannel(guildID, channelID);
        if (channel instanceof TextChannel_1.TextChannel) {
            return channel?.messages.map(msg => msg);
        }
    }
    /**
     * Get a user.
     *
     * Note: when getting the bot's user, only the information specific to 'User' will be returned.
     * If you'd like to get the UserClient (the bot itself), use Client#user.
     * @param userID The ID of the user to get.
     */
    async getUser(userID) {
        return this.rest.misc.getUser(userID);
    }
    /**
     * Retrieve user's joined servers.
     * @param userID ID of the user. (`@me` can be used to select your instance)
     */
    async getUserGuilds(userID) {
        return this.rest.misc.getUserGuilds(userID);
    }
    // docs
    /** This method is used to get a list of "Channel" Doc.
     * @param channelID ID of a "Docs" channel.
     * @param filter Object to filter the output.
     */
    async getDocs(channelID, filter) {
        return this.rest.channels.getDocs(channelID, filter);
    }
    /** This method is used to get a channel doc.
     *
     * Note: This method requires a "Docs" channel.
     * @param channelID ID of the Docs channel.
     * @param docID ID of the channel doc.
     */
    async getDoc(channelID, docID) {
        return this.rest.channels.getDoc(channelID, docID);
    }
    /**
     * Get every comments from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     */
    async getDocComments(channelID, docID) {
        return this.rest.channels.getDocComments(channelID, docID);
    }
    /**
     * Get a specific comment from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     * @param commentID ID of the comment to get.
     */
    async getDocComment(channelID, docID, commentID) {
        return this.rest.channels.getDocComment(channelID, docID, commentID);
    }
    //  ForumThread
    /** This method is used to get a list of ForumThread.
     * @param channelID ID of a "Forum" channel.
     * @param filter Object to filter the output.
     */
    async getForumThreads(channelID, filter) {
        return this.rest.channels.getForumThreads(channelID, filter);
    }
    /** This method is used to get a specific forum thread.
     *
     * Note: This method requires a "Forum" channel.
     * @param channelID ID of a speific Forum channel.
     * @param threadID ID of the specific Forum Thread.
     */
    async getForumThread(channelID, threadID) {
        return this.rest.channels.getForumThread(channelID, threadID);
    }
    /** This method is used to get a list of ForumThreadComment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum Thread.
     */
    async getForumComments(channelID, threadID) {
        return this.rest.channels.getForumComments(channelID, threadID);
    }
    /** This method is used to get a specific forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum thread.
     * @param commentID ID of a Forum thread comment.
     */
    async getForumComment(channelID, threadID, commentID) {
        return this.rest.channels.getForumComment(channelID, threadID, commentID);
    }
    // Calendar
    /** This method is used to get a list of CalendarEvent
     * @param channelID ID of a "Calendar" channel.
     * @param filter Object to filter the output.
     */
    async getCalendarEvents(channelID, filter) {
        return this.rest.channels.getCalendarEvents(channelID, filter);
    }
    /** This method is used to get a specific calendar event.
     *
     * Note: this method requires a "Calendar" channel.
     * @param channelID ID of a Calendar channel.
     * @param eventID ID of a Calendar event.
     */
    async getCalendarEvent(channelID, eventID) {
        return this.rest.channels.getCalendarEvent(channelID, eventID);
    }
    /** This method is used to get a specific event comment coming from a calendar.
     * Note: this method doesn't cache scheduled events due to the API's restrictions.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of an event containing the comment to get.
     * @param commentID ID of the comment to get.
     */
    async getCalendarEventComment(channelID, eventID, commentID) {
        return this.rest.channels.getCalendarEventComment(channelID, eventID, commentID);
    }
    /** This method is used to get a list of CalendarEventComment
     * Note: due to API's restrictions, we're not able to cache scheduled events from this method.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of the event containing comments.
     */
    async getCalendarEventComments(channelID, eventID) {
        return this.rest.channels.getCalendarEventComments(channelID, eventID);
    }
    /** This method is used to get a specific CalendarEventRSVP.
     *
     * Note: this method requires a Calendar channel.
     * @param channelID ID of a Calendar channel
     * @param eventID ID of a Calendar Event
     * @param memberID ID of a Guild Member
     */
    async getCalendarRsvp(channelID, eventID, memberID) {
        return this.rest.channels.getCalendarRsvp(channelID, eventID, memberID);
    }
    /** This method is used to get a list of CalendarEventRSVP.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    async getCalendarRsvps(channelID, eventID) {
        return this.rest.channels.getCalendarRsvps(channelID, eventID);
    }
    // list item
    /** This method is used to get a specific list item.
     * @param channelID ID of a "List" channel.
     * @param itemID ID of a list item.
     */
    async getListItem(channelID, itemID) {
        return this.rest.channels.getListItem(channelID, itemID);
    }
    /** This method is used to get a list of ListItem.
     * @param channelID ID of a "List" channel.
     */
    async getListItems(channelID) {
        return this.rest.channels.getListItems(channelID);
    }
    /** This method is used to get a specific webhook.
     * @param guildID ID of a guild.
     * @param webhookID ID of a webhook.
     */
    async getWebhook(guildID, webhookID) {
        return this.rest.guilds.getWebhook(guildID, webhookID);
    }
    /** This method is used to get a list of Webhook.
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     */
    async getWebhooks(guildID, channelID) {
        return this.rest.guilds.getWebhooks(guildID, channelID);
    }
    // CREATE, EDIT, DELETE.
    // message
    /** Create a channel in a specified guild.
     * @param guildID ID of a guild.
     * @param name Name of the new channel.
     * @param type Type of the new channel. (e.g: chat)
     * @param options New channel's additional options.
     */
    async createChannel(guildID, name, type, options) {
        return this.rest.guilds.createChannel(guildID, name, type, options);
    }
    /** Edit a channel.
     * @param channelID ID of the channel you'd like to edit.
     * @param options Channel edit options.
     */
    async editChannel(channelID, options) {
        return this.rest.guilds.editChannel(channelID, options);
    }
    /** Delete a channel.
     * @param channelID ID of the channel you'd like to delete.
     */
    async deleteChannel(channelID) {
        return this.rest.guilds.deleteChannel(channelID);
    }
    /** Send a message in a specified channel.
     * @param channelID ID of the channel.
     * @param options Message options
     */
    async createMessage(channelID, options) {
        return this.rest.channels.createMessage(channelID, options);
    }
    /** Edit a specific message coming from a specified channel.
     * @param channelID The ID of the channel.
     * @param messageID The ID of the message you'd like to edit.
     * @param newMessage object containing new message's options.
     */
    async editMessage(channelID, messageID, newMessage) {
        return this.rest.channels.editMessage(channelID, messageID, newMessage);
    }
    /** Delete a specific message.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to delete.
     */
    async deleteMessage(channelID, messageID) {
        return this.rest.channels.deleteMessage(channelID, messageID);
    }
    /** Add a reaction to a specified target.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a message id)
     * @param reaction ID of the reaction.
     */
    async createReaction(channelID, channelType, targetID, reaction) {
        return this.rest.channels.createReaction(channelID, channelType, targetID, reaction);
    }
    /** Remove a reaction from a specified message.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction from. (e.g: a message id)
     * @param reaction ID of the reaction.
     */
    async deleteReaction(channelID, channelType, targetID, reaction) {
        return this.rest.channels.deleteReaction(channelID, channelType, targetID, reaction);
    }
    /**
     * Bulk delete every reaction from a target.
     * @param channelID ID of a channel.
     * @param channelType Type of channel.
     * @param targetID Target to remove reactions from it.
     */
    async bulkDeleteReactions(channelID, channelType, targetID, filter) {
        return this.rest.channels.bulkDeleteReactions(channelID, channelType, targetID, filter);
    }
    /** Add a reaction to a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    async createReactionToSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction) {
        return this.rest.channels.createReactionToSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction);
    }
    /** Remove a reaction from a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to remove the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    async deleteReactionFromSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction) {
        return this.rest.channels.deleteReactionFromSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction);
    }
    // ForumThread
    /** Create a forum thread in a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param options Thread's options including title & content.
     */
    async createForumThread(channelID, options) {
        return this.rest.channels.createForumThread(channelID, options);
    }
    /** Edit a forum thread from a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Edit options.
     */
    async editForumThread(channelID, threadID, options) {
        return this.rest.channels.editForumThread(channelID, threadID, options);
    }
    /** Delete a forum thread from a specific forum channel
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async deleteForumThread(channelID, threadID) {
        return this.rest.channels.deleteForumThread(channelID, threadID);
    }
    /** Pin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async pinForumThread(channelID, threadID) {
        return this.rest.channels.pinForumThread(channelID, threadID);
    }
    /** Unpin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async unpinForumThread(channelID, threadID) {
        return this.rest.channels.unpinForumThread(channelID, threadID);
    }
    /** Lock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async lockForumThread(channelID, threadID) {
        return this.rest.channels.lockForumThread(channelID, threadID);
    }
    /** Unlock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async unlockForumThread(channelID, threadID) {
        return this.rest.channels.unlockForumThread(channelID, threadID);
    }
    /** Add a comment to a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Comment's options.
     */
    async createForumComment(channelID, threadID, options) {
        return this.rest.channels.createForumComment(channelID, threadID, options);
    }
    /** Edit a forum thread's comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a thread comment.
     * @param options Edit options.
     */
    async editForumComment(channelID, threadID, commentID, options) {
        return this.rest.channels.editForumComment(channelID, threadID, commentID, options);
    }
    /** Delete a forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a forum thread comment.
     */
    async deleteForumComment(channelID, threadID, commentID) {
        return this.rest.channels.deleteForumComment(channelID, threadID, commentID);
    }
    // docs
    /** Create a doc in a "Docs" channel.
     * @param channelID ID pf a "Docs" channel.
     * @param options Doc's options.
     */
    async createDoc(channelID, options) {
        return this.rest.channels.createDoc(channelID, options);
    }
    /** Edit a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     * @param options Edit options.
     */
    async editDoc(channelID, docID, options) {
        return this.rest.channels.editDoc(channelID, docID, options);
    }
    /** Delete a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     */
    async deleteDoc(channelID, docID) {
        return this.rest.channels.deleteDoc(channelID, docID);
    }
    /**
     * Create a comment in a doc.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param options Create options.
     */
    async createDocComment(channelID, docID, options) {
        return this.rest.channels.createDocComment(channelID, docID, options);
    }
    /**
     * Edit a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    async editDocComment(channelID, docID, commentID, options) {
        return this.rest.channels.editDocComment(channelID, docID, commentID, options);
    }
    /**
     * Delete a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to delete.
     */
    async deleteDocComment(channelID, docID, commentID) {
        return this.rest.channels.deleteDocComment(channelID, docID, commentID);
    }
    // calendar events
    /** Create an event into a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param options Event options.
     * @param createSeries (optional) Create a series. (event's repetition)
     */
    async createCalendarEvent(channelID, options, createSeries) {
        return this.rest.channels.createCalendarEvent(channelID, options, createSeries);
    }
    /** Edit an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param options Edit options.
     */
    async editCalendarEvent(channelID, eventID, options) {
        return this.rest.channels.editCalendarEvent(channelID, eventID, options);
    }
    /** Delete an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    async deleteCalendarEvent(channelID, eventID) {
        return this.rest.channels.deleteCalendarEvent(channelID, eventID);
    }
    /**
     * The Guilded API only allows series on the event's creation.
     *
     * **Use createCalendarEvent and set the createSeries property to create a series.**
     */
    createCalendarEventSeries() {
        return this.rest.channels.createCalendarEventSeries();
    }
    /**
     * Edit a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     * @param options Edit repetition options.
     */
    async editCalendarEventSeries(channelID, eventID, seriesID, options) {
        return this.rest.channels.editCalendarEventSeries(channelID, eventID, seriesID, options);
    }
    /**
     * Delete a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     */
    async deleteCalendarEventSeries(channelID, eventID, seriesID) {
        return this.rest.channels.deleteCalendarEventSeries(channelID, eventID, seriesID);
    }
    /** Create a comment inside a calendar event.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of a calendar event.
     * @param options Comment options, includes content, and more.
     */
    async createCalendarComment(channelID, eventID, options) {
        return this.rest.channels.createCalendarComment(channelID, eventID, options);
    }
    /** Edit an existing calendar event comment.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of an event from the channel.
     * @param commentID The ID of the comment to edit.
     * @param options Edit options.
     */
    async editCalendarComment(channelID, eventID, commentID, options) {
        return this.rest.channels.editCalendarComment(channelID, eventID, commentID, options);
    }
    /** Delete a comment from a calendar event.
     * @param channelID ID of the channel containing the event.
     * @param eventID ID of the event containing the comment.
     * @param commentID ID of the comment to delete.
     */
    async deleteCalendarComment(channelID, eventID, commentID) {
        return this.rest.channels.deleteCalendarComment(channelID, eventID, commentID);
    }
    /** Add/Edit a RSVP in a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     * @param options Edit options.
     */
    async editCalendarRsvp(channelID, eventID, memberID, options) {
        return this.rest.channels.editCalendarRsvp(channelID, eventID, memberID, options);
    }
    /** Delete a RSVP from a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     */
    async deleteCalendarRsvp(channelID, eventID, memberID) {
        return this.rest.channels.deleteCalendarRsvp(channelID, eventID, memberID);
    }
    /**
     * Bulk create/update calendar rsvps.
     * @param channelID ID of the Calendar channel.
     * @param eventID ID of a calendar event.
     * @param memberIDs List of multiple member ids.
     * @param options Update options.
     */
    async bulkCalendarRsvpUpdate(channelID, eventID, memberIDs, options) {
        return this.rest.channels.bulkCalendarRsvpUpdate(channelID, eventID, memberIDs, options);
    }
    // Announcement
    /**
     * Create a new announcement within an announcement channel.
     * @param channelID ID of the Announcement channel.
     * @param options Announcement creation options.
     */
    async createAnnouncement(channelID, options) {
        return this.rest.channels.createAnnouncement(channelID, options);
    }
    /**
     * Edit an existing announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to edit.
     * @param options Edit options
     */
    async editAnnouncement(channelID, announcementID, options) {
        return this.rest.channels.editAnnouncement(channelID, announcementID, options);
    }
    /**
     * Delete an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to delete.
     */
    async deleteAnnouncement(channelID, announcementID) {
        return this.rest.channels.deleteAnnouncement(channelID, announcementID);
    }
    /**
     * Get a list of announcements from a channel.
     * @param channelID ID of an Announcement channel.
     * @param filter Filter to apply.
     */
    async getAnnouncements(channelID, filter) {
        return this.rest.channels.getAnnouncements(channelID, filter);
    }
    /**
     * Get a specific announcement from a channel.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to get.
     */
    async getAnnouncement(channelID, announcementID) {
        return this.rest.channels.getAnnouncement(channelID, announcementID);
    }
    /**
     * Create a comment inside an announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to create the comment in.
     * @param options Comment creation options.
     */
    async createAnnouncementComment(channelID, announcementID, options) {
        return this.rest.channels.createAnnouncementComment(channelID, announcementID, options);
    }
    /**
     * Edit an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement where the comment is in.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    async editAnnouncementComment(channelID, announcementID, commentID, options) {
        return this.rest.channels.editAnnouncementComment(channelID, announcementID, commentID, options);
    }
    /**
     * Delete an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to delete.
     */
    async deleteAnnouncementComment(channelID, announcementID, commentID) {
        return this.rest.channels.deleteAnnouncementComment(channelID, announcementID, commentID);
    }
    /**
     * Get comments from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement.
     */
    async getAnnouncementComments(channelID, announcementID) {
        return this.rest.channels.getAnnouncementComments(channelID, announcementID);
    }
    /**
     * Get a specific comment from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to get.
     */
    async getAnnouncementComment(channelID, announcementID, commentID) {
        return this.rest.channels.getAnnouncementComment(channelID, announcementID, commentID);
    }
    // list item
    /** Create a new item in a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param content String content of the new item.
     * @param note Add a note to the new item.
     */
    async createListItem(channelID, content, note) {
        return this.rest.channels.createListItem(channelID, content, note);
    }
    /** Edit an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     * @param options Edit options.
     */
    async editListItem(channelID, itemID, options) {
        return this.rest.channels.editListItem(channelID, itemID, options);
    }
    /** Delete an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async deleteListItem(channelID, itemID) {
        return this.rest.channels.deleteListItem(channelID, itemID);
    }
    /** Mark a list item as completed.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async completeListItem(channelID, itemID) {
        return this.rest.channels.completeListItem(channelID, itemID);
    }
    /** Mark a list item as uncompleted.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async uncompleteListItem(channelID, itemID) {
        return this.rest.channels.uncompleteListItem(channelID, itemID);
    }
    // group membership
    /** Add a member to a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    async memberAddGroup(groupID, memberID) {
        return this.rest.guilds.memberAddGroup(groupID, memberID);
    }
    /** Remove a member from a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    async memberRemoveGroup(groupID, memberID) {
        return this.rest.guilds.memberRemoveGroup(groupID, memberID);
    }
    // role membership
    /** Add a role to a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    async memberAddRole(guildID, memberID, roleID) {
        return this.rest.guilds.memberAddRole(guildID, memberID, roleID);
    }
    /** Remove a role from a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    async memberRemoveRole(guildID, memberID, roleID) {
        return this.rest.guilds.memberRemoveRole(guildID, memberID, roleID);
    }
    /** Edit a member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the the member to edit.
     * @param options Edit options.
     */
    async editMember(guildID, memberID, options) {
        return this.rest.guilds.editMember(guildID, memberID, options);
    }
    /** Remove a member from a guild.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to kick.
     */
    async removeMember(guildID, memberID) {
        return this.rest.guilds.removeMember(guildID, memberID);
    }
    /** Ban a guild member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the member to ban.
     * @param reason The reason of the ban.
     */
    async createBan(guildID, memberID, reason) {
        return this.rest.guilds.createBan(guildID, memberID, reason);
    }
    /** Unban a guild member.
     * @param guildID ID of the guild the member was in.
     * @param memberID ID of the member to unban.
     */
    async removeBan(guildID, memberID) {
        return this.rest.guilds.removeBan(guildID, memberID);
    }
    /** Create a webhook
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     * @param name Name of the new webhook.
     */
    async createWebhook(guildID, channelID, name) {
        return this.rest.guilds.createWebhook(guildID, channelID, name);
    }
    /** Update a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     * @param options Edit options.
     */
    async editWebhook(guildID, webhookID, options) {
        return this.rest.guilds.editWebhook(guildID, webhookID, options);
    }
    /** Delete a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     */
    async deleteWebhook(guildID, webhookID) {
        return this.rest.guilds.deleteWebhook(guildID, webhookID);
    }
    // MISC
    /** Award a member using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Amount of experience.
     */
    async awardMember(guildID, memberID, amount) {
        return this.rest.guilds.awardMember(guildID, memberID, amount);
    }
    /** Set a member's xp using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Total amount of experience.
     */
    async setMemberXP(guildID, memberID, amount) {
        return this.rest.guilds.setMemberXP(guildID, memberID, amount);
    }
    /** Award every members of a guild having a role using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param roleID ID of a role.
     * @param amount Amount of experience.
     */
    async awardRole(guildID, roleID, amount) {
        return this.rest.guilds.awardRole(guildID, roleID, amount);
    }
    /**
     * Get every guild roles from a guild.
     * @param guildID ID of the guild where roles are.
     */
    async getGuildRoles(guildID) {
        return this.rest.guilds.getRoles(guildID);
    }
    /**
     * Get a guild role.
     * @param guildID ID of the guild where the role is.
     * @param roleID ID of the role to get.
     */
    async getGuildRole(guildID, roleID) {
        return this.rest.guilds.getRole(guildID, roleID);
    }
    /**
     * Create a guild role.
     * @param guildID ID of the server you want to create the role in.
     * @param options Create options
     */
    async createGuildRole(guildID, options) {
        return this.rest.guilds.createRole(guildID, options);
    }
    /**
     * Edit a guild role.
     * @param guildID ID of the server
     * @param roleID ID of the role to edit
     * @param options Edit options
     */
    async editGuildRole(guildID, roleID, options) {
        return this.rest.guilds.editRole(guildID, roleID, options);
    }
    /**
     * Edit guild role permission.
     * @param guildID ID of the guild.
     * @param roleID ID of the role.
     * @param options Permission to edit.
     */
    async editGuildRolePermission(guildID, roleID, options) {
        return this.rest.guilds.editRolePermission(guildID, roleID, options);
    }
    /**
     * Delete a guild role.
     * @param guildID ID of the guild where the role to delete is in
     * @param roleID ID of the role to delete
     */
    async deleteGuildRole(guildID, roleID) {
        return this.rest.guilds.deleteRole(guildID, roleID);
    }
    /**
     * Change a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     * @param options Status options
     */
    async updateUserStatus(userID, options) {
        return this.rest.misc.updateUserStatus(userID, options);
    }
    /**
     * Delete a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     */
    async deleteUserStatus(userID) {
        return this.rest.misc.deleteUserStatus(userID);
    }
    /**
     * Get guild groups.
     * @param guildID ID of the guild.
     */
    async getGuildGroups(guildID) {
        return this.rest.guilds.getGroups(guildID);
    }
    /**
     * Get a guild group.
     * @param guildID ID of the guild.
     * @param groupID ID of the group to get.
     */
    async getGuildGroup(guildID, groupID) {
        return this.rest.guilds.getGroup(guildID, groupID);
    }
    /**
     * Create a guild group.
     * @param guildID The ID of the guild to create a group in.
     * @param options Create options
     */
    async createGuildGroup(guildID, options) {
        return this.rest.guilds.createGroup(guildID, options);
    }
    /**
     * Edit a guild group.
     * @param guildID The ID of the guild where the group to edit is in
     * @param groupID The ID of the group to edit.
     * @param options Edit options
     */
    async editGuildGroup(guildID, groupID, options) {
        return this.rest.guilds.editGroup(guildID, groupID, options);
    }
    /**
     * Delete a guild group
     * @param guildID ID of the guild where the group is in.
     * @param groupID ID of the group to delete.
     */
    async deleteGuildGroup(guildID, groupID) {
        return this.rest.guilds.deleteGroup(guildID, groupID);
    }
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     */
    async getGuildSubscriptions(guildID) {
        return this.rest.guilds.getSubscriptions(guildID);
    }
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     * @param subscriptionID ID of the subscription to get.
     */
    async getGuildSubscription(guildID, subscriptionID) {
        return this.rest.guilds.getSubscription(guildID, subscriptionID);
    }
    /**
     * Archive a channel.
     * @param channelID ID of the channel to archive.
     */
    async archiveChannel(channelID) {
        return this.rest.channels.archiveChannel(channelID);
    }
    /**
     * Unarchive a channel.
     * @param channelID ID of the channel to unarchive.
     */
    async restoreChannel(channelID) {
        return this.rest.channels.restoreChannel(channelID);
    }
    /**
     * Pin a message.
     * @param channelID ID of the channel where the message is.
     * @param messageID ID of the message to pin.
     */
    async pinMessage(channelID, messageID) {
        return this.rest.channels.pinMessage(channelID, messageID);
    }
    /**
     * Unpin a message.
     * @param channelID ID of the channel where the message is.
     * @param messageID ID of the message to unpin.
     */
    async unpinMessage(channelID, messageID) {
        return this.rest.channels.unpinMessage(channelID, messageID);
    }
    /**
     * Bulk XP Awards Members.
     * @param guildID ID of the guild.
     * @param options Bulk XP options.
     */
    async bulkAwardXPMembers(guildID, options) {
        return this.rest.guilds.bulkAwardXP(guildID, options);
    }
    /**
     * Bulk XP Set Members.
     * @param guildID ID of the guild.
     * @param options Bulk XP options.
     */
    async bulkSetMembersXP(guildID, options) {
        return this.rest.guilds.bulkSetXP(guildID, options);
    }
    /**
     * Create a guild category
     * @param guildID ID of the guild.
     * @param options Create options.
     */
    async createGuildCategory(guildID, options) {
        return this.rest.guilds.createCategory(guildID, options);
    }
    /**
     * Read a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    async getGuildCategory(guildID, categoryID) {
        return this.rest.guilds.getCategory(guildID, categoryID);
    }
    /**
     * Edit a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    async editGuildCategory(guildID, categoryID, options) {
        return this.rest.guilds.editCategory(guildID, categoryID, options);
    }
    /**
     * Delete a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    async deleteGuildCategory(guildID, categoryID) {
        return this.rest.guilds.deleteCategory(guildID, categoryID);
    }
    /**
     * Add a new user permission to a channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to assign the permission to
     * @param options Create options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async createChannelPermission(guildID, channelID, targetID, options) {
        return this.rest.channels.createPermission(guildID, channelID, targetID, options);
    }
    /**
     * Update a channel permission.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async editChannelPermission(guildID, channelID, targetID, options) {
        return this.rest.channels.editPermission(guildID, channelID, targetID, options);
    }
    /**
     * Delete a channel permission.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async deleteChannelPermission(guildID, channelID, targetID) {
        return this.rest.channels.deletePermission(guildID, channelID, targetID);
    }
    /**
     * Get the permissions of a user or role for a specified channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to get the permission
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async getChannelPermission(guildID, channelID, targetID) {
        return this.rest.channels.getPermission(guildID, channelID, targetID);
    }
    async getChannelPermissions(guildID, channelID) {
        return this.rest.channels.getPermissions(guildID, channelID);
    }
    /**
     * Get the permissions of every users in the guild for a specified channel.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    async getChannelUserPermissions(guildID, channelID) {
        return this.rest.channels.getUserPermissions(guildID, channelID);
    }
    /**
     * Get existing channel permissions for a specified role.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    async getChannelRolePermissions(guildID, channelID) {
        return this.rest.channels.getRolePermissions(guildID, channelID);
    }
    /**
     * Create a channel category permission assigned to a user or role.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to
     * @param options Permission options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async createCategoryPermission(guildID, categoryID, targetID, options) {
        return this.rest.guilds.createCategoryPermission(guildID, categoryID, targetID, options);
    }
    /**
     * Update a category permission.
     * @param guildID ID of the server the category is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async editCategoryPermission(guildID, categoryID, targetID, options) {
        return this.rest.guilds.editCategoryPermission(guildID, categoryID, targetID, options);
    }
    /**
     * Get permission coming from a category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permission is in
     * @param targetID ID of the user (string) or role (number) to get the permission for
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async getCategoryPermission(guildID, categoryID, targetID) {
        return this.rest.guilds.getCategoryPermission(guildID, categoryID, targetID);
    }
    /**
     * Get permissions of a category.
     * @param guildID ID of the server the category is in.
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryPermissions(guildID, categoryID) {
        return this.rest.guilds.getCategoryPermissions(guildID, categoryID);
    }
    /**
     * Get user permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryUserPermissions(guildID, categoryID) {
        return this.rest.guilds.getCategoryUserPermissions(guildID, categoryID);
    }
    /**
     * Get role permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryRolePermissions(guildID, categoryID) {
        return this.rest.guilds.getCategoryRolePermissions(guildID, categoryID);
    }
    /**
     * Delete a category permission.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user or role to delete the permission from
     */
    async deleteCategoryPermission(guildID, categoryID, targetID) {
        return this.rest.guilds.deleteCategoryPermission(guildID, categoryID, targetID);
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,