/** @module CalendarEventComment */
import { Client } from "./Client";
import { Base } from "./Base";
import { Member } from "./Member";
import { APICalendarEventComment } from "../Constants";
import { CreateCalendarCommentOptions, EditCalendarCommentOptions } from "../types/calendarEvent";
import { JSONCalendarEventComment } from "../types/json";
import { ConstructorCalendarEventCommentOptions } from "../types/calendarEventComment";
/** CalendarEventComment represents an event comment coming from a calendar channel. */
export declare class CalendarEventComment extends Base<number> {
    /** Raw data */
    data: APICalendarEventComment;
    /** This property isn't always provided by the Guilded API, the value can be null, which disable the ability to get member through this class. */
    guildID: string | null;
    /** The content of the comment. */
    content: string;
    /** The ISO 8601 timestamp that this comment was created at. */
    createdAt: Date;
    /** The ISO 8601 timestamp that this comment was updated at. */
    updatedAt: Date | null;
    /** The ID of the event containing this comment. (parent) */
    eventID: number;
    /** The ID of the channel containing this comment. */
    channelID: string;
    /** The ID of the member who sent this comment. */
    memberID: string;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APICalendarEventComment, client: Client, options?: ConstructorCalendarEventCommentOptions);
    toJSON(): JSONCalendarEventComment;
    protected update(data: APICalendarEventComment): void;
    /** Retrieve the member who sent this comment, if cached.
     * If there is no cached member, this will make a rest request which returns a Promise.
     * If the request fails, it'll return undefined or throw an error that you can catch.
     */
    get member(): Member | Promise<Member> | undefined;
    /** Create a comment in the same event as this one.
     * @param options Create options.
     */
    createCalendarComment(options: CreateCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Add a reaction to this comment.
     * @param reaction ID of the reaction to add.
     */
    createReaction(reaction: number): Promise<void>;
    /** Remove a reaction from this comment.
     * @param reaction ID of the reaction to remove.
     */
    deleteReaction(reaction: number): Promise<void>;
    /** Edit this comment */
    edit(options: EditCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Delete this comment */
    delete(): Promise<void>;
}
