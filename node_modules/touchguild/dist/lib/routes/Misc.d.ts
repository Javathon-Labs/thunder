/** @module Routes/Guilds */
import type { RESTManager } from "../rest/RESTManager";
import { PUTUserStatusBody } from "../Constants";
import { User } from "../structures/User";
import { SocialLink } from "../structures/SocialLink";
import { Guild } from "../structures/Guild";
/** Miscellaneous routes. */
export declare class Miscellaneous {
    #private;
    /**
     * @param manager REST Manager needed to execute request.
     */
    constructor(manager: RESTManager);
    /** Get a specified social link from the member, if member is connected to them through Guilded.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to get their social link.
     * @param socialMediaName Name of a social media linked to this member.
     */
    getSocialLink(guildID: string, memberID: string, socialMediaName: string): Promise<SocialLink>;
    /**
     * Get a user.
     *
     * Note: when getting the bot's user, only the information specific to 'User' will be returned.
     * If you'd like to get the UserClient (the bot itself), use Client#user.
     * @param userID The ID of the user to get.
     */
    getUser(userID: string): Promise<User>;
    /**
     * Retrieve user's joined servers.
     * @param userID ID of the user. (`@me` can be used to select your instance)
     */
    getUserGuilds(userID: string): Promise<Array<Guild>>;
    /**
     * Change a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     * @param options Status options
     */
    updateUserStatus(userID: string | "@me", options: PUTUserStatusBody): Promise<void>;
    /**
     * Delete a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     */
    deleteUserStatus(userID: string | "@me"): Promise<void>;
}
