"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channels = void 0;
const tslib_1 = require("tslib");
const endpoints = tslib_1.__importStar(require("../rest/endpoints"));
const Doc_1 = require("../structures/Doc");
const ForumThread_1 = require("../structures/ForumThread");
const CalendarEvent_1 = require("../structures/CalendarEvent");
const CalendarRSVP_1 = require("../structures/CalendarRSVP");
const Message_1 = require("../structures/Message");
const ForumThreadComment_1 = require("../structures/ForumThreadComment");
const ListItem_1 = require("../structures/ListItem");
const CalendarEventComment_1 = require("../structures/CalendarEventComment");
const DocComment_1 = require("../structures/DocComment");
const Announcement_1 = require("../structures/Announcement");
const AnnouncementComment_1 = require("../structures/AnnouncementComment");
const Permission_1 = require("../structures/Permission");
class Channels {
    #manager;
    constructor(manager) {
        this.#manager = manager;
    }
    /** This method is used to get a guild channel.
     * @param channelID The ID of the channel to get.
     */
    async getChannel(channelID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL(channelID)
        }).then(data => this.#manager.client.util.updateChannel(data.channel));
    }
    /** This method is used to get a channel message.
     * @param channelID The ID of the channel containing the message.
     * @param messageID The ID of the message to get.
     * @param params Optional parameters.
     */
    async getMessage(channelID, messageID, params) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_MESSAGE(channelID, messageID)
        }).then(data => this.#manager.client.getChannel(data.message.serverId, channelID)?.messages.update(data.message) ?? new Message_1.Message(data.message, this.#manager.client, params));
    }
    /** This method is used to get a list of Message
     * @param channelID ID of a "Chat" channel.
     * @param filter Object to filter the output.
     */
    async getMessages(channelID, filter) {
        const query = new URLSearchParams();
        if (filter) {
            if (filter.before)
                query.set("before", filter.before.toString());
            if (filter.after)
                query.set("after", filter.after.toString());
            if (filter.includePrivate)
                query.set("includePrivate", filter.includePrivate.toString());
            if (filter.limit)
                query.set("limit", filter.limit.toString());
        }
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_MESSAGES(channelID),
            query
        }).then(data => data.messages.map(d => this.#manager.client.getChannel(d.serverId, channelID)?.messages.update(d) ?? new Message_1.Message(d, this.#manager.client)));
    }
    /** This method is used to get a channel doc.
     *
     * Note: This method requires a "Docs" channel.
     * @param channelID ID of the Docs channel.
     * @param docID ID of the channel doc.
     */
    async getDoc(channelID, docID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_DOC(channelID, docID)
        }).then(data => this.#manager.client.getChannel(data.doc.serverId, channelID)?.docs.update(data.doc) ?? new Doc_1.Doc(data.doc, this.#manager.client));
    }
    /** This method is used to get a list of "Channel" Doc.
     * @param channelID ID of a "Docs" channel.
     * @param filter Object to filter the output.
     */
    async getDocs(channelID, filter) {
        const query = new URLSearchParams();
        if (filter) {
            if (filter.before)
                query.set("before", filter.before.toString());
            if (filter.limit)
                query.set("limit", filter.limit.toString());
        }
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_DOCS(channelID),
            query
        }).then(data => data.docs.map(d => this.#manager.client.getChannel(d.serverId, channelID)?.docs.update(d) ?? new Doc_1.Doc(d, this.#manager.client)));
    }
    /**
     * Get every comments from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     */
    async getDocComments(channelID, docID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_DOC_COMMENTS(channelID, docID)
        }).then(data => data.docComments.map(d => new DocComment_1.DocComment(d, this.#manager.client)));
    }
    /**
     * Get a specific comment from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     * @param commentID ID of the comment to get.
     */
    async getDocComment(channelID, docID, commentID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_DOC_COMMENT(channelID, docID, commentID)
        }).then(data => new DocComment_1.DocComment(data.docComment, this.#manager.client));
    }
    /** This method is used to get a specific forum thread.
     *
     * Note: This method requires a "Forum" channel.
     * @param channelID ID of a speific Forum channel.
     * @param threadID ID of the specific Forum Thread.
     */
    async getForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.FORUM_TOPIC(channelID, threadID)
        }).then(data => this.#manager.client.util.updateForumThread(data.forumTopic));
    }
    /** This method is used to get a list of ForumThread.
     * @param channelID ID of a "Forum" channel.
     * @param filter Object to filter the output.
     */
    async getForumThreads(channelID, filter) {
        const query = new URLSearchParams();
        if (filter) {
            if (filter.before)
                query.set("before", filter.before.toString());
            if (filter.limit)
                query.set("limit", filter.limit.toString());
        }
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.FORUM_TOPICS(channelID),
            query
        }).then(data => data.forumTopics.map(d => this.#manager.client.util.updateForumThread(d)));
    }
    /** This method is used to get a specific forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum thread.
     * @param commentID ID of a Forum thread comment.
     */
    async getForumComment(channelID, threadID, commentID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.FORUM_TOPIC_COMMENT(channelID, threadID, commentID)
        }).then(data => new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.#manager.client));
    }
    /** This method is used to get a list of ForumThreadComment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum Thread.
     */
    async getForumComments(channelID, threadID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.FORUM_TOPIC_COMMENTS(channelID, threadID)
        }).then(data => data.forumTopicComments.map(d => new ForumThreadComment_1.ForumThreadComment(d, this.#manager.client)));
    }
    /** This method is used to get a specific calendar event.
     *
     * Note: this method requires a "Calendar" channel.
     * @param channelID ID of a Calendar channel.
     * @param eventID ID of a Calendar event.
     */
    async getCalendarEvent(channelID, eventID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENT(channelID, eventID)
        }).then(data => this.#manager.client.getChannel(data.calendarEvent.serverId, data.calendarEvent.channelId)?.scheduledEvents.update(data.calendarEvent) ?? new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.#manager.client));
    }
    /** This method is used to get a list of CalendarEvent
     * @param channelID ID of a "Calendar" channel.
     * @param filter Object to filter the output.
     */
    async getCalendarEvents(channelID, filter) {
        const query = new URLSearchParams();
        if (filter) {
            if (filter.before)
                query.set("before", filter.before.toString());
            if (filter.after)
                query.set("after", filter.after.toString());
            if (filter.limit)
                query.set("limit", filter.limit.toString());
        }
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENTS(channelID),
            query
        }).then(data => data.calendarEvents.map(d => this.#manager.client.getChannel(d.serverId, d.channelId)?.scheduledEvents.update(d) ?? new CalendarEvent_1.CalendarEvent(d, this.#manager.client)));
    }
    /** This method is used to get a specific event comment coming from a calendar.
     * Note: this method doesn't cache scheduled events due to the API's restrictions.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of an event containing the comment to get.
     * @param commentID ID of the comment to get.
     */
    async getCalendarEventComment(channelID, eventID, commentID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENT_COMMENT(channelID, eventID, commentID)
        }).then(data => new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.#manager.client));
    }
    /** This method is used to get a list of CalendarEventComment
     * Note: due to API's restrictions, we're not able to cache scheduled events from this method.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of the event containing comments.
     */
    async getCalendarEventComments(channelID, eventID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENT_COMMENTS(channelID, eventID)
        }).then(data => data.calendarEventComments.map(d => new CalendarEventComment_1.CalendarEventComment(d, this.#manager.client)));
    }
    /** This method is used to get a specific CalendarEventRSVP.
     *
     * Note: this method requires a Calendar channel.
     * @param channelID ID of a Calendar channel
     * @param eventID ID of a Calendar Event
     * @param memberID ID of a Guild Member
     */
    async getCalendarRsvp(channelID, eventID, memberID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENT_RSVP(channelID, eventID, memberID)
        }).then(data => this.#manager.client.getChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId)?.scheduledEvents.get(data.calendarEventRsvp.calendarEventId)?.rsvps.update(data.calendarEventRsvp) ?? new CalendarRSVP_1.CalendarEventRSVP(data.calendarEventRsvp, this.#manager.client));
    }
    /** This method is used to get a list of CalendarEventRSVP.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    async getCalendarRsvps(channelID, eventID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_EVENT_RSVPS(channelID, eventID)
        }).then(data => data.calendarEventRsvps.map(d => this.#manager.client.getChannel(d.serverId, d.channelId)?.scheduledEvents.get(d.calendarEventId)?.rsvps.update(d) ?? new CalendarRSVP_1.CalendarEventRSVP(d, this.#manager.client)));
    }
    /** This method is used to get a specific list item.
     * @param channelID ID of a "List" channel.
     * @param itemID ID of a list item.
     */
    async getListItem(channelID, itemID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.LIST_ITEM(channelID, itemID)
        }).then(data => new ListItem_1.ListItem(data.listItem, this.#manager.client));
    }
    /** This method is used to get a list of ListItem.
     * @param channelID ID of a "List" channel.
     */
    async getListItems(channelID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.LIST_ITEMS(channelID)
        }).then(data => data.listItems.map(d => new ListItem_1.ListItem(d, this.#manager.client)));
    }
    // CREATE, EDIT & DELETE
    /** Send a message in a specified channel.
     * @param channelID ID of the channel.
     * @param options Message options
     * @param params Optional parameters.
     */
    async createMessage(channelID, options, params) {
        if (typeof options !== "object")
            throw new Error("message options should be an object.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_MESSAGES(channelID),
            json: options
        }).then(data => new Message_1.Message(data.message, this.#manager.client, params));
    }
    /** Edit a specific message coming from a specified channel.
     * @param channelID The ID of the channel.
     * @param messageID The ID of the message you'd like to edit.
     * @param newMessage object containing new message's options.
     * @param params Optional parameters.
     */
    async editMessage(channelID, messageID, newMessage, params) {
        if (typeof newMessage !== "object")
            throw new Error("newMessage should be an object.");
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.CHANNEL_MESSAGE(channelID, messageID),
            json: newMessage
        }).then(data => new Message_1.Message(data.message, this.#manager.client, params));
    }
    /** Delete a specific message.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to delete.
     */
    async deleteMessage(channelID, messageID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_MESSAGE(channelID, messageID)
        });
    }
    /** Add a reaction to a specified object from a channel.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the object you'd like to add the reaction to. (e.g: a message ID)
     * @param reaction ID of the reaction to add.
     */
    async createReaction(channelID, channelType, targetID, reaction) {
        if (channelType !== "ChannelMessage" && channelType !== "ForumThread" && channelType !== "CalendarEvent" && channelType !== "Doc" && channelType !== "ChannelAnnouncement")
            throw new Error("Invalid channel type.");
        let endpointType;
        if (channelType === "ChannelMessage")
            endpointType = "CHANNEL_MESSAGE_EMOTE";
        if (channelType === "ForumThread")
            endpointType = "FORUM_TOPIC_EMOTE";
        if (channelType === "CalendarEvent")
            endpointType = "CHANNEL_EVENT_EMOTE";
        if (channelType === "Doc")
            endpointType = "CHANNEL_DOC_EMOTE";
        if (channelType === "ChannelAnnouncement")
            endpointType = "CHANNEL_ANNOUNCEMENT_EMOTE";
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints[endpointType](channelID, targetID, reaction, 0)
        });
    }
    /** Remove a reaction from a specified message.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a message ID)
     * @param reaction ID of the reaction.
     */
    async deleteReaction(channelID, channelType, targetID, reaction) {
        if (channelType !== "ChannelMessage" && channelType !== "ForumThread" && channelType !== "CalendarEvent" && channelType !== "Doc" && channelType !== "ChannelAnnouncement")
            throw new Error("Invalid channel type.");
        let endpointType;
        if (channelType === "ChannelMessage")
            endpointType = "CHANNEL_MESSAGE_EMOTE";
        if (channelType === "ForumThread")
            endpointType = "FORUM_TOPIC_EMOTE";
        if (channelType === "CalendarEvent")
            endpointType = "CHANNEL_EVENT_EMOTE";
        if (channelType === "Doc")
            endpointType = "CHANNEL_DOC_EMOTE";
        if (channelType === "ChannelAnnouncement")
            endpointType = "CHANNEL_ANNOUNCEMENT_EMOTE";
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints[endpointType](channelID, targetID, reaction, 0)
        });
    }
    /**
     * Bulk delete every reaction from a target.
     * @param channelID ID of a channel.
     * @param channelType Type of channel.
     * @param targetID Target to remove reactions from it.
     */
    async bulkDeleteReactions(channelID, channelType, targetID, filter) {
        if (channelType !== "ChannelMessage")
            throw new Error("Invalid channel type.");
        let endpointType;
        if (channelType === "ChannelMessage")
            endpointType = "CHANNEL_MESSAGE_EMOTES";
        const query = new URLSearchParams();
        if (filter?.emoteId)
            query.set("emoteId", filter.emoteId.toString());
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints[endpointType](channelID, targetID, 0, 0),
            query
        });
    }
    /** Add a reaction to a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    async createReactionToSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction) {
        if (subcategoryType !== "CalendarEventComment" && subcategoryType !== "ForumThreadComment" && subcategoryType !== "DocComment" && subcategoryType !== "AnnouncementComment")
            throw new Error("Invalid channel subcategory.");
        let endpointType;
        if (subcategoryType === "CalendarEventComment")
            endpointType = "CHANNEL_EVENT_COMMENT_EMOTE";
        if (subcategoryType === "ForumThreadComment")
            endpointType = "FORUM_TOPIC_COMMENT_EMOTE";
        if (subcategoryType === "DocComment")
            endpointType = "CHANNEL_DOC_COMMENT_EMOTE";
        if (subcategoryType === "AnnouncementComment")
            endpointType = "CHANNEL_ANNOUNCEMENT_COMMENT_EMOTE";
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints[endpointType](channelID, subcategoryID, targetID, reaction)
        });
    }
    /** Remove a reaction from a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to remove the reaction from. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    async deleteReactionFromSubcategory(channelID, subcategoryType, subcategoryID, targetID, reaction) {
        if (subcategoryType !== "CalendarEventComment" && subcategoryType !== "ForumThreadComment" && subcategoryType !== "DocComment" && subcategoryType !== "AnnouncementComment")
            throw new Error("Invalid channel subcategory.");
        let endpointType;
        if (subcategoryType === "CalendarEventComment")
            endpointType = "CHANNEL_EVENT_COMMENT_EMOTE";
        if (subcategoryType === "ForumThreadComment")
            endpointType = "FORUM_TOPIC_COMMENT_EMOTE";
        if (subcategoryType === "DocComment")
            endpointType = "CHANNEL_DOC_COMMENT_EMOTE";
        if (subcategoryType === "AnnouncementComment")
            endpointType = "CHANNEL_ANNOUNCEMENT_COMMENT_EMOTE";
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints[endpointType](channelID, subcategoryID, targetID, reaction)
        });
    }
    /** Create a forum thread in a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param options Thread's options including title & content.
     */
    async createForumThread(channelID, options) {
        if (typeof options !== "object")
            throw new Error("thread options should be an object.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.FORUM_TOPICS(channelID),
            json: options
        }).then(data => new ForumThread_1.ForumThread(data.forumTopic, this.#manager.client));
    }
    /** Edit a forum thread from a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Edit options.
     */
    async editForumThread(channelID, threadID, options) {
        if (typeof options !== "object")
            throw new Error("thread options should be an object.");
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.FORUM_TOPIC(channelID, threadID),
            json: options
        }).then(data => new ForumThread_1.ForumThread(data.forumTopic, this.#manager.client));
    }
    /** Delete a forum thread from a specific forum channel
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async deleteForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.FORUM_TOPIC(channelID, threadID)
        });
    }
    /** Pin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async pinForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.FORUM_TOPIC_PIN(channelID, threadID)
        });
    }
    /** Unpin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async unpinForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.FORUM_TOPIC_PIN(channelID, threadID)
        });
    }
    /** Lock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async lockForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.FORUM_TOPIC_LOCK(channelID, threadID)
        });
    }
    /** Unlock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    async unlockForumThread(channelID, threadID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.FORUM_TOPIC_LOCK(channelID, threadID)
        });
    }
    /** Add a comment to a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Comment's options.
     */
    async createForumComment(channelID, threadID, options) {
        if (typeof options !== "object")
            throw new Error("comment options should be an object.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.FORUM_TOPIC_COMMENTS(channelID, threadID),
            json: options
        }).then(data => new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.#manager.client, { channelID }));
    }
    /** Edit a forum thread's comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a thread comment.
     * @param options Edit options.
     */
    async editForumComment(channelID, threadID, commentID, options) {
        if (typeof options !== "object")
            throw new Error("comment options should be an object.");
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.FORUM_TOPIC_COMMENT(channelID, threadID, commentID),
            json: options
        }).then(data => new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.#manager.client, { channelID }));
    }
    /** Delete a forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a forum thread comment.
     */
    async deleteForumComment(channelID, threadID, commentID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.FORUM_TOPIC_COMMENT(channelID, threadID, commentID)
        });
    }
    /** Create a doc in a "Docs" channel.
     * @param channelID ID pf a "Docs" channel.
     * @param options Doc's options.
     */
    async createDoc(channelID, options) {
        if (typeof options !== "object")
            throw new Error("doc options should be an object.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_DOCS(channelID),
            json: options
        }).then(data => new Doc_1.Doc(data.doc, this.#manager.client));
    }
    /** Edit a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     * @param options Edit options.
     */
    async editDoc(channelID, docID, options) {
        if (typeof options !== "object")
            throw new Error("doc options should be an object.");
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.CHANNEL_DOC(channelID, docID),
            json: options
        }).then(data => new Doc_1.Doc(data.doc, this.#manager.client));
    }
    /** Delete a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     */
    async deleteDoc(channelID, docID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_DOC(channelID, docID)
        });
    }
    /**
     * Create a comment in a doc.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param options Create options.
     */
    async createDocComment(channelID, docID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_DOC_COMMENTS(channelID, docID),
            json: options
        }).then(data => new DocComment_1.DocComment(data.docComment, this.#manager.client));
    }
    /**
     * Edit a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    async editDocComment(channelID, docID, commentID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_DOC_COMMENT(channelID, docID, commentID),
            json: options
        }).then(data => new DocComment_1.DocComment(data.docComment, this.#manager.client));
    }
    /**
     * Delete a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to delete.
     */
    async deleteDocComment(channelID, docID, commentID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_DOC_COMMENT(channelID, docID, commentID)
        });
    }
    /** Create an event into a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param options Event options.
     * @param createSeries (optional) Create a series. (event's repetition)
     */
    async createCalendarEvent(channelID, options, createSeries) {
        if (typeof options !== "object")
            throw new Error("event options should be an object.");
        if (options.duration && typeof options.duration === "number") {
            if (options.duration < 1000)
                throw new Error("The duration should be higher than 1000 ms.");
            options.duration = options.duration / 1000; // ms to min.
        }
        const reqOptions = options;
        if (createSeries)
            Object.assign(reqOptions, { repeatInfo: createSeries });
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_EVENTS(channelID),
            json: options
        }).then(data => new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.#manager.client));
    }
    /** Edit an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param options Edit options.
     */
    async editCalendarEvent(channelID, eventID, options) {
        if (typeof options !== "object")
            throw new Error("event options should be an object.");
        if (options.duration && typeof options.duration === "number") {
            if (options.duration < 1000)
                throw new Error("The duration should be higher than 1000 ms.");
            options.duration = options.duration / 1000; // ms to min.
        }
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_EVENT(channelID, eventID),
            json: options
        }).then(data => new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.#manager.client));
    }
    /**
     * The Guilded API only allows series on the event's creation.
     *
     * **Use createCalendarEvent and set the createSeries property to create a series.**
     */
    createCalendarEventSeries() {
        return new Error("The Guilded API only allows series on the event's creation. Use createCalendarEvent and set the createSeries property to create a series.");
    }
    /**
     * Edit a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     * @param options Edit repetition options.
     */
    async editCalendarEventSeries(channelID, eventID, seriesID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_EVENT_EVENT_SERIES_ENTITY(channelID, seriesID),
            json: { calendarEventId: eventID, repeatInfo: options }
        });
    }
    /**
     * Delete a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     */
    async deleteCalendarEventSeries(channelID, eventID, seriesID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_EVENT_EVENT_SERIES_ENTITY(channelID, seriesID),
            json: { calendarEventId: eventID }
        });
    }
    /** Create a comment inside a calendar event.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of a calendar event.
     * @param options Comment options, includes content, and more.
     */
    async createCalendarComment(channelID, eventID, options) {
        if (typeof options !== "object")
            throw new Error("comment options should be an object.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_EVENT_COMMENTS(channelID, eventID),
            json: options
        }).then(data => new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.#manager.client));
    }
    /** Edit an existing calendar event comment.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of an event from the channel.
     * @param commentID The ID of the comment to edit.
     * @param options Edit options.
     */
    async editCalendarComment(channelID, eventID, commentID, options) {
        if (typeof options !== "object")
            throw new Error("comment options should be an object.");
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_EVENT_COMMENT(channelID, eventID, commentID),
            json: options
        }).then(data => new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.#manager.client));
    }
    /** Delete a comment from a calendar event.
     * @param channelID ID of the channel containing the event.
     * @param eventID ID of the event containing the comment.
     * @param commentID ID of the comment to delete.
     */
    async deleteCalendarComment(channelID, eventID, commentID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_EVENT_COMMENT(channelID, eventID, commentID)
        });
    }
    /** Delete an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    async deleteCalendarEvent(channelID, eventID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_EVENT(channelID, eventID)
        });
    }
    /** Add/Edit a RSVP in a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     * @param options Edit options.
     */
    async editCalendarRsvp(channelID, eventID, memberID, options) {
        if (typeof options !== "object")
            throw new Error("rsvp options should be an object.");
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.CHANNEL_EVENT_RSVP(channelID, eventID, memberID),
            json: options
        }).then(data => new CalendarRSVP_1.CalendarEventRSVP(data.calendarEventRsvp, this.#manager.client));
    }
    /** Delete a RSVP from a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     */
    async deleteCalendarRsvp(channelID, eventID, memberID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_EVENT_RSVP(channelID, eventID, memberID)
        });
    }
    /**
     * Bulk create/update calendar rsvps.
     * @param channelID ID of the Calendar channel.
     * @param eventID ID of a calendar event.
     * @param memberIDs List of multiple member ids.
     * @param options Update options.
     */
    async bulkCalendarRsvpUpdate(channelID, eventID, memberIDs, options) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.CHANNEL_EVENT_RSVPS(channelID, eventID),
            json: {
                userIds: memberIDs,
                status: options.status
            }
        });
    }
    /** Create a new item in a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param content String content of the new item.
     * @param note Add a note to the new item.
     */
    async createListItem(channelID, content, note) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.LIST_ITEMS(channelID),
            json: { message: content, note }
        }).then(data => new ListItem_1.ListItem(data.listItem, this.#manager.client));
    }
    /** Edit an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     * @param options Edit options.
     */
    async editListItem(channelID, itemID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.LIST_ITEM(channelID, itemID),
            json: { message: options?.content, note: options?.note }
        }).then(data => new ListItem_1.ListItem(data.listItem, this.#manager.client));
    }
    /** Delete an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async deleteListItem(channelID, itemID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.LIST_ITEM(channelID, itemID)
        });
    }
    /** Mark a list item as completed.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async completeListItem(channelID, itemID) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.LIST_ITEM_COMPLETE(channelID, itemID)
        });
    }
    /** Mark a list item as uncompleted.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    async uncompleteListItem(channelID, itemID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.LIST_ITEM_COMPLETE(channelID, itemID)
        });
    }
    /**
     * Create a new announcement within an announcement channel.
     * @param channelID ID of the Announcement channel.
     * @param options Announcement creation options.
     */
    async createAnnouncement(channelID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_ANNOUNCEMENTS(channelID),
            json: options
        }).then(data => new Announcement_1.Announcement(data.announcement, this.#manager.client));
    }
    /**
     * Edit an existing announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to edit.
     * @param options Edit options
     */
    async editAnnouncement(channelID, announcementID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_ANNOUNCEMENT(channelID, announcementID),
            json: options
        }).then(data => new Announcement_1.Announcement(data.announcement, this.#manager.client));
    }
    /**
     * Delete an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to delete.
     */
    async deleteAnnouncement(channelID, announcementID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_ANNOUNCEMENT(channelID, announcementID)
        });
    }
    /**
     * Get a list of announcements from a channel.
     * @param channelID ID of an Announcement channel.
     * @param filter Filter to apply.
     */
    async getAnnouncements(channelID, filter) {
        const query = new URLSearchParams();
        if (filter?.before)
            query.set("before", filter.before.toString());
        if (filter?.limit)
            query.set("limit", filter.limit.toString());
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_ANNOUNCEMENTS(channelID),
            query
        }).then(data => data.announcements.map(d => new Announcement_1.Announcement(d, this.#manager.client)));
    }
    /**
     * Get a specific announcement from a channel.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to get.
     */
    async getAnnouncement(channelID, announcementID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_ANNOUNCEMENT(channelID, announcementID)
        }).then(data => new Announcement_1.Announcement(data.announcement, this.#manager.client));
    }
    /**
     * Create a comment inside an announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to create the comment in.
     * @param options Comment creation options.
     */
    async createAnnouncementComment(channelID, announcementID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_ANNOUNCEMENT_COMMENTS(channelID, announcementID),
            json: options
        }).then(data => new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.#manager.client));
    }
    /**
     * Edit an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement where the comment is in.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    async editAnnouncementComment(channelID, announcementID, commentID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL_ANNOUNCEMENT_COMMENT(channelID, announcementID, commentID),
            json: options
        }).then(data => new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.#manager.client));
    }
    /**
     * Delete an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to delete.
     */
    async deleteAnnouncementComment(channelID, announcementID, commentID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_ANNOUNCEMENT_COMMENT(channelID, announcementID, commentID)
        });
    }
    /**
     * Get comments from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement.
     */
    async getAnnouncementComments(channelID, announcementID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_ANNOUNCEMENT_COMMENTS(channelID, announcementID)
        }).then(data => data.announcementComments.map(d => new AnnouncementComment_1.AnnouncementComment(d, this.#manager.client)));
    }
    /**
     * Get a specific comment from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to get.
     */
    async getAnnouncementComment(channelID, announcementID, commentID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.CHANNEL_ANNOUNCEMENT_COMMENT(channelID, announcementID, commentID)
        }).then(data => new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.#manager.client));
    }
    /**
     * Archive a channel.
     * @param guildID ID of the guild where the channel to archive is in
     * @param channelID ID of the channel to archive
     */
    async archiveChannel(channelID) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.CHANNEL_ARCHIVE(channelID)
        });
    }
    /**
     * Restore a channel.
     * @param guildID ID of the guild where the channel to restore is in
     * @param channelID ID of the channel to restore
     */
    async restoreChannel(channelID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_ARCHIVE(channelID)
        });
    }
    /**
     * Pin a message.
     * @param channelID ID of the channel where the message to pin is in
     * @param messageID ID of the message to pin
     */
    async pinMessage(channelID, messageID) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNEL_MESSAGE_PIN(channelID, messageID)
        });
    }
    /**
     * Unpin a message.
     * @param channelID ID of the channel where the message to unpin is in
     * @param messageID ID of the message to unpin
     */
    async unpinMessage(channelID, messageID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL_MESSAGE_PIN(channelID, messageID)
        });
    }
    /**
     * Add a new user permission to a channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to assign the permission to
     * @param options Create options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async createPermission(guildID, channelID, targetID, options) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_CHANNEL_USER_PERMISSION(guildID, channelID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelUserPermission)) : this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_CHANNEL_ROLE_PERMISSION(guildID, channelID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelRolePermission));
    }
    /**
     * Update a channel permission.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async editPermission(guildID, channelID, targetID, options) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_CHANNEL_USER_PERMISSION(guildID, channelID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelUserPermission)) : this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_CHANNEL_ROLE_PERMISSION(guildID, channelID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelRolePermission));
    }
    /**
     * Delete a channel permission.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async deletePermission(guildID, channelID, targetID) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_CHANNEL_USER_PERMISSION(guildID, channelID, targetID)
        }) : this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_CHANNEL_ROLE_PERMISSION(guildID, channelID, targetID)
        });
    }
    /**
     * Get the permissions of a user or role for a specified channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to get the permission
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async getPermission(guildID, channelID, targetID) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CHANNEL_USER_PERMISSION(guildID, channelID, targetID)
        }).then(data => new Permission_1.Permission(data.channelUserPermission)) :
            this.#manager.authRequest({
                method: "GET",
                path: endpoints.GUILD_CHANNEL_ROLE_PERMISSION(guildID, channelID, targetID)
            }).then(data => new Permission_1.Permission(data.channelRolePermission));
    }
    async getPermissions(guildID, channelID) {
        const userPromise = this.getUserPermissions(guildID, channelID);
        const rolePromise = this.getRolePermissions(guildID, channelID);
        return Promise.all([userPromise, rolePromise])
            .then(([userPermissions, rolePermissions]) => userPermissions.concat(rolePermissions))
            .catch(err => {
            throw err;
        });
    }
    /**
     * Get the permissions of every users in the guild for a specified channel.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    async getUserPermissions(guildID, channelID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CHANNEL_USER_PERMISSIONS(guildID, channelID)
        }).then(data => data.channelUserPermissions.map(d => new Permission_1.Permission(d)));
    }
    /**
     * Get existing channel permissions for a specified role.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    async getRolePermissions(guildID, channelID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CHANNEL_ROLE_PERMISSIONS(guildID, channelID)
        }).then(data => data.channelRolePermissions.map(d => new Permission_1.Permission(d)));
    }
}
exports.Channels = Channels;
//# sourceMappingURL=data:application/json;base64,