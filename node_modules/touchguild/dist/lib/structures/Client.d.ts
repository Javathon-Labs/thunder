/** @module Client */
import { Message } from "./Message";
import { Member } from "./Member";
import { Guild } from "./Guild";
import { ForumThread } from "./ForumThread";
import { Webhook } from "./Webhook";
import { Doc } from "./Doc";
import { CalendarEvent } from "./CalendarEvent";
import { CalendarEventRSVP } from "./CalendarRSVP";
import { ListItem } from "./ListItem";
import { UserClient } from "./UserClient";
import { ForumThreadComment } from "./ForumThreadComment";
import { User } from "./User";
import { BannedMember } from "./BannedMember";
import { ForumChannel } from "./ForumChannel";
import { CalendarEventComment } from "./CalendarEventComment";
import { DocComment } from "./DocComment";
import { AnnouncementComment } from "./AnnouncementComment";
import { Announcement } from "./Announcement";
import { GuildRole } from "./GuildRole";
import { GuildGroup } from "./GuildGroup";
import { GuildSubscription } from "./GuildSubscription";
import { GuildCategory } from "./GuildCategory";
import { Permission } from "./Permission";
import { WSManager } from "../gateway/WSManager";
import { RESTManager } from "../rest/RESTManager";
import TypedCollection from "../util/TypedCollection";
import TypedEmitter from "../types/TypedEmitter";
import { ClientEvents } from "../types/events";
import { ClientOptions } from "../types/client";
import { APIChannelCategories, PUTGuildWebhookBody, POSTListItemBody, ChannelReactionTypes, APIGuild, APIUser, ChannelSubcategoryReactionTypes, POSTCalendarEventBody, PATCHListItemBody, PATCHChannelAnnouncementCommentBody, POSTChannelAnnouncementCommentBody, GETChannelAnnouncementsQuery, PATCHChannelAnnouncementBody, POSTChannelAnnouncementBody, ChannelReactionTypeBulkDeleteSupported, DELETEMessageReactionQuery, PUTUserStatusBody, POSTGuildGroupBody, PATCHGuildGroupBody, POSTGuildRoleBody, PATCHGuildRoleBody, POSTBulkAwardXPBody, POSTBulkAwardXPResponse, PUTBulkSetXPBody, PUTBulkSetXPResponse, POSTCreateCategoryBody, PATCHUpdateCategoryBody, POSTChannelRolePermissionBody, POSTChannelUserPermissionBody, PATCHChannelRolePermissionBody, PATCHGuildRoleUpdateBody, Permissions, POSTChannelCategoryUserPermissionBody, PATCHChannelCategoryUserPermissionBody } from "../Constants";
import { AnyChannel, AnyTextableChannel, CreateChannelOptions, CreateMessageOptions, EditChannelOptions } from "../types/channel";
import { CreateForumThreadOptions, EditForumThreadOptions, GetForumThreadsFilter } from "../types/forumThread";
import { CreateForumCommentOptions, EditForumCommentOptions } from "../types/forumThreadComment";
import { CreateDocOptions, EditDocOptions, GetDocsFilter } from "../types/doc";
import { CreateCalendarCommentOptions, CreateCalendarEventOptions, EditCalendarCommentOptions, EditCalendarEventOptions, EditCalendarRSVPOptions, GetCalendarEventsFilter } from "../types/calendarEvent";
import { EditMemberOptions } from "../types/guilds";
import { Util } from "../util/Util";
import { CreateDocCommentOptions, EditDocCommentOptions } from "../types/docComment";
/** Represents the bot's client. */
export declare class Client extends TypedEmitter<ClientEvents> {
    #private;
    /** Client's params, including bot's token & rest options. */
    params: ClientOptions;
    /** Websocket Manager. */
    ws: WSManager;
    /** Client's user. */
    user?: UserClient;
    /** REST methods. */
    rest: RESTManager;
    /** Cached guilds. */
    guilds: TypedCollection<string, APIGuild, Guild>;
    /** Cached users. */
    users: TypedCollection<string, APIUser, User>;
    /** Utils */
    util: Util;
    startTime: number;
    /** @param params Client's parameters, this includes bot's token & rest options. */
    constructor(params: ClientOptions);
    /** Bot's token. */
    get token(): string;
    get uptime(): number;
    /** Connect to Guilded. */
    connect(): void;
    /** Disconnect from Guilded.
     * @param crashOnDisconnect If set, throws an error to stop the process.
     */
    disconnect(crashOnDisconnect?: boolean): void;
    /** This method is used to get a specific guild channel, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param channelID The ID of the channel to get from cache.
     */
    getChannel<T extends AnyChannel = AnyChannel>(guildID: string, channelID: string): T | undefined;
    /** This method is used to get a specific guild member, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to get.
     */
    getMember(guildID: string, memberID: string): Member | undefined;
    /** This method is used to get a list of cached guild member.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID ID of the guild to get members.
     */
    getMembers(guildID: string): Array<Member> | undefined;
    /**
     * Get guild member permissions.
     * @param guildID ID of the guild.
     * @param memberID ID of the member.
     */
    getMemberPermission(guildID: string, memberID: string): Promise<Array<Permissions>>;
    /** Get a ban.
     * @param guildID ID of the guild.
     * @param memberID ID of the banned member.
     */
    getBan(guildID: string, memberID: string): Promise<BannedMember>;
    /** This method is used to get a list of guild ban.
     * @param guildID ID of the guild.
     */
    getBans(guildID: string): Promise<Array<BannedMember>>;
    /** Get a cached guild, returns `undefined` if not cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID The ID of the guild to get.
     */
    getGuild(guildID: string): Guild | undefined;
    /** Get a channel's message, if cached.
     *
     * Note: this method doesn't send a rest request, it only returns cached entities.
     * @param guildID ID of the guild.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to get.
     */
    getMessage(guildID: string, channelID: string, messageID: string): Message<AnyTextableChannel> | undefined;
    /** This method is used to get cached messages from a channel.
     * @param guildID ID of the guild.
     * @param channelID ID of a "Chat" channel.
     */
    getMessages(guildID: string, channelID: string): Array<Message<AnyTextableChannel>> | undefined;
    /**
     * Get a user.
     *
     * Note: when getting the bot's user, only the information specific to 'User' will be returned.
     * If you'd like to get the UserClient (the bot itself), use Client#user.
     * @param userID The ID of the user to get.
     */
    getUser(userID: string): Promise<User>;
    /**
     * Retrieve user's joined servers.
     * @param userID ID of the user. (`@me` can be used to select your instance)
     */
    getUserGuilds(userID: string): Promise<Array<Guild>>;
    /** This method is used to get a list of "Channel" Doc.
     * @param channelID ID of a "Docs" channel.
     * @param filter Object to filter the output.
     */
    getDocs(channelID: string, filter?: GetDocsFilter): Promise<Array<Doc>>;
    /** This method is used to get a channel doc.
     *
     * Note: This method requires a "Docs" channel.
     * @param channelID ID of the Docs channel.
     * @param docID ID of the channel doc.
     */
    getDoc(channelID: string, docID: number): Promise<Doc>;
    /**
     * Get every comments from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     */
    getDocComments(channelID: string, docID: number): Promise<Array<DocComment>>;
    /**
     * Get a specific comment from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     * @param commentID ID of the comment to get.
     */
    getDocComment(channelID: string, docID: number, commentID: number): Promise<DocComment>;
    /** This method is used to get a list of ForumThread.
     * @param channelID ID of a "Forum" channel.
     * @param filter Object to filter the output.
     */
    getForumThreads(channelID: string, filter?: GetForumThreadsFilter): Promise<Array<ForumThread<ForumChannel>>>;
    /** This method is used to get a specific forum thread.
     *
     * Note: This method requires a "Forum" channel.
     * @param channelID ID of a speific Forum channel.
     * @param threadID ID of the specific Forum Thread.
     */
    getForumThread(channelID: string, threadID: number): Promise<ForumThread<ForumChannel>>;
    /** This method is used to get a list of ForumThreadComment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum Thread.
     */
    getForumComments(channelID: string, threadID: number): Promise<Array<ForumThreadComment>>;
    /** This method is used to get a specific forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum thread.
     * @param commentID ID of a Forum thread comment.
     */
    getForumComment(channelID: string, threadID: number, commentID: number): Promise<ForumThreadComment>;
    /** This method is used to get a list of CalendarEvent
     * @param channelID ID of a "Calendar" channel.
     * @param filter Object to filter the output.
     */
    getCalendarEvents(channelID: string, filter?: GetCalendarEventsFilter): Promise<Array<CalendarEvent>>;
    /** This method is used to get a specific calendar event.
     *
     * Note: this method requires a "Calendar" channel.
     * @param channelID ID of a Calendar channel.
     * @param eventID ID of a Calendar event.
     */
    getCalendarEvent(channelID: string, eventID: number): Promise<CalendarEvent>;
    /** This method is used to get a specific event comment coming from a calendar.
     * Note: this method doesn't cache scheduled events due to the API's restrictions.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of an event containing the comment to get.
     * @param commentID ID of the comment to get.
     */
    getCalendarEventComment(channelID: string, eventID: number, commentID: number): Promise<CalendarEventComment>;
    /** This method is used to get a list of CalendarEventComment
     * Note: due to API's restrictions, we're not able to cache scheduled events from this method.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of the event containing comments.
     */
    getCalendarEventComments(channelID: string, eventID: number): Promise<Array<CalendarEventComment>>;
    /** This method is used to get a specific CalendarEventRSVP.
     *
     * Note: this method requires a Calendar channel.
     * @param channelID ID of a Calendar channel
     * @param eventID ID of a Calendar Event
     * @param memberID ID of a Guild Member
     */
    getCalendarRsvp(channelID: string, eventID: number, memberID: string): Promise<CalendarEventRSVP>;
    /** This method is used to get a list of CalendarEventRSVP.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    getCalendarRsvps(channelID: string, eventID: number): Promise<Array<CalendarEventRSVP>>;
    /** This method is used to get a specific list item.
     * @param channelID ID of a "List" channel.
     * @param itemID ID of a list item.
     */
    getListItem(channelID: string, itemID: string): Promise<ListItem>;
    /** This method is used to get a list of ListItem.
     * @param channelID ID of a "List" channel.
     */
    getListItems(channelID: string): Promise<Array<ListItem>>;
    /** This method is used to get a specific webhook.
     * @param guildID ID of a guild.
     * @param webhookID ID of a webhook.
     */
    getWebhook(guildID: string, webhookID: string): Promise<Webhook>;
    /** This method is used to get a list of Webhook.
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     */
    getWebhooks(guildID: string, channelID: string): Promise<Array<Webhook>>;
    /** Create a channel in a specified guild.
     * @param guildID ID of a guild.
     * @param name Name of the new channel.
     * @param type Type of the new channel. (e.g: chat)
     * @param options New channel's additional options.
     */
    createChannel<T extends AnyChannel = AnyChannel>(guildID: string, name: string, type: APIChannelCategories, options?: CreateChannelOptions): Promise<T>;
    /** Edit a channel.
     * @param channelID ID of the channel you'd like to edit.
     * @param options Channel edit options.
     */
    editChannel<T extends AnyChannel = AnyChannel>(channelID: string, options: EditChannelOptions): Promise<T>;
    /** Delete a channel.
     * @param channelID ID of the channel you'd like to delete.
     */
    deleteChannel(channelID: string): Promise<void>;
    /** Send a message in a specified channel.
     * @param channelID ID of the channel.
     * @param options Message options
     */
    createMessage<T extends AnyTextableChannel = AnyTextableChannel>(channelID: string, options: CreateMessageOptions): Promise<Message<T>>;
    /** Edit a specific message coming from a specified channel.
     * @param channelID The ID of the channel.
     * @param messageID The ID of the message you'd like to edit.
     * @param newMessage object containing new message's options.
     */
    editMessage<T extends AnyTextableChannel>(channelID: string, messageID: string, newMessage: object): Promise<Message<T>>;
    /** Delete a specific message.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to delete.
     */
    deleteMessage(channelID: string, messageID: string): Promise<void>;
    /** Add a reaction to a specified target.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a message id)
     * @param reaction ID of the reaction.
     */
    createReaction(channelID: string, channelType: ChannelReactionTypes, targetID: string | number, reaction: number): Promise<void>;
    /** Remove a reaction from a specified message.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction from. (e.g: a message id)
     * @param reaction ID of the reaction.
     */
    deleteReaction(channelID: string, channelType: ChannelReactionTypes, targetID: string | number, reaction: number): Promise<void>;
    /**
     * Bulk delete every reaction from a target.
     * @param channelID ID of a channel.
     * @param channelType Type of channel.
     * @param targetID Target to remove reactions from it.
     */
    bulkDeleteReactions(channelID: string, channelType: ChannelReactionTypeBulkDeleteSupported, targetID: string | number, filter?: DELETEMessageReactionQuery): Promise<void>;
    /** Add a reaction to a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    createReactionToSubcategory(channelID: string, subcategoryType: ChannelSubcategoryReactionTypes, subcategoryID: string | number, targetID: string | number, reaction: number): Promise<void>;
    /** Remove a reaction from a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to remove the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    deleteReactionFromSubcategory(channelID: string, subcategoryType: ChannelSubcategoryReactionTypes, subcategoryID: string | number, targetID: string | number, reaction: number): Promise<void>;
    /** Create a forum thread in a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param options Thread's options including title & content.
     */
    createForumThread<T extends ForumChannel = ForumChannel>(channelID: string, options: CreateForumThreadOptions): Promise<ForumThread<T>>;
    /** Edit a forum thread from a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Edit options.
     */
    editForumThread<T extends ForumChannel = ForumChannel>(channelID: string, threadID: number, options: EditForumThreadOptions): Promise<ForumThread<T>>;
    /** Delete a forum thread from a specific forum channel
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    deleteForumThread(channelID: string, threadID: number): Promise<void>;
    /** Pin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    pinForumThread(channelID: string, threadID: number): Promise<void>;
    /** Unpin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    unpinForumThread(channelID: string, threadID: number): Promise<void>;
    /** Lock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    lockForumThread(channelID: string, threadID: number): Promise<void>;
    /** Unlock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    unlockForumThread(channelID: string, threadID: number): Promise<void>;
    /** Add a comment to a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Comment's options.
     */
    createForumComment(channelID: string, threadID: number, options: CreateForumCommentOptions): Promise<ForumThreadComment>;
    /** Edit a forum thread's comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a thread comment.
     * @param options Edit options.
     */
    editForumComment(channelID: string, threadID: number, commentID: number, options?: EditForumCommentOptions): Promise<ForumThreadComment>;
    /** Delete a forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a forum thread comment.
     */
    deleteForumComment(channelID: string, threadID: number, commentID: number): Promise<void>;
    /** Create a doc in a "Docs" channel.
     * @param channelID ID pf a "Docs" channel.
     * @param options Doc's options.
     */
    createDoc(channelID: string, options: CreateDocOptions): Promise<Doc>;
    /** Edit a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     * @param options Edit options.
     */
    editDoc(channelID: string, docID: number, options: EditDocOptions): Promise<Doc>;
    /** Delete a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     */
    deleteDoc(channelID: string, docID: number): Promise<void>;
    /**
     * Create a comment in a doc.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param options Create options.
     */
    createDocComment(channelID: string, docID: number, options: CreateDocCommentOptions): Promise<DocComment>;
    /**
     * Edit a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    editDocComment(channelID: string, docID: number, commentID: number, options: EditDocCommentOptions): Promise<DocComment>;
    /**
     * Delete a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to delete.
     */
    deleteDocComment(channelID: string, docID: number, commentID: number): Promise<void>;
    /** Create an event into a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param options Event options.
     * @param createSeries (optional) Create a series. (event's repetition)
     */
    createCalendarEvent(channelID: string, options: CreateCalendarEventOptions, createSeries?: POSTCalendarEventBody["repeatInfo"]): Promise<CalendarEvent>;
    /** Edit an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param options Edit options.
     */
    editCalendarEvent(channelID: string, eventID: number, options: EditCalendarEventOptions): Promise<CalendarEvent>;
    /** Delete an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    deleteCalendarEvent(channelID: string, eventID: number): Promise<void>;
    /**
     * The Guilded API only allows series on the event's creation.
     *
     * **Use createCalendarEvent and set the createSeries property to create a series.**
     */
    createCalendarEventSeries(): Error;
    /**
     * Edit a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     * @param options Edit repetition options.
     */
    editCalendarEventSeries(channelID: string, eventID: number, seriesID: string, options: POSTCalendarEventBody["repeatInfo"]): Promise<void>;
    /**
     * Delete a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     */
    deleteCalendarEventSeries(channelID: string, eventID: number, seriesID: string): Promise<void>;
    /** Create a comment inside a calendar event.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of a calendar event.
     * @param options Comment options, includes content, and more.
     */
    createCalendarComment(channelID: string, eventID: number, options: CreateCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Edit an existing calendar event comment.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of an event from the channel.
     * @param commentID The ID of the comment to edit.
     * @param options Edit options.
     */
    editCalendarComment(channelID: string, eventID: number, commentID: number, options: EditCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Delete a comment from a calendar event.
     * @param channelID ID of the channel containing the event.
     * @param eventID ID of the event containing the comment.
     * @param commentID ID of the comment to delete.
     */
    deleteCalendarComment(channelID: string, eventID: number, commentID: number): Promise<void>;
    /** Add/Edit a RSVP in a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     * @param options Edit options.
     */
    editCalendarRsvp(channelID: string, eventID: number, memberID: string, options: EditCalendarRSVPOptions): Promise<CalendarEventRSVP>;
    /** Delete a RSVP from a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     */
    deleteCalendarRsvp(channelID: string, eventID: number, memberID: string): Promise<void>;
    /**
     * Bulk create/update calendar rsvps.
     * @param channelID ID of the Calendar channel.
     * @param eventID ID of a calendar event.
     * @param memberIDs List of multiple member ids.
     * @param options Update options.
     */
    bulkCalendarRsvpUpdate(channelID: string, eventID: number, memberIDs: Array<string>, options: EditCalendarRSVPOptions): Promise<void>;
    /**
     * Create a new announcement within an announcement channel.
     * @param channelID ID of the Announcement channel.
     * @param options Announcement creation options.
     */
    createAnnouncement(channelID: string, options: POSTChannelAnnouncementBody): Promise<Announcement>;
    /**
     * Edit an existing announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to edit.
     * @param options Edit options
     */
    editAnnouncement(channelID: string, announcementID: string, options: PATCHChannelAnnouncementBody): Promise<Announcement>;
    /**
     * Delete an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to delete.
     */
    deleteAnnouncement(channelID: string, announcementID: string): Promise<void>;
    /**
     * Get a list of announcements from a channel.
     * @param channelID ID of an Announcement channel.
     * @param filter Filter to apply.
     */
    getAnnouncements(channelID: string, filter?: GETChannelAnnouncementsQuery): Promise<Array<Announcement>>;
    /**
     * Get a specific announcement from a channel.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to get.
     */
    getAnnouncement(channelID: string, announcementID: string): Promise<Announcement>;
    /**
     * Create a comment inside an announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to create the comment in.
     * @param options Comment creation options.
     */
    createAnnouncementComment(channelID: string, announcementID: string, options: POSTChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Edit an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement where the comment is in.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    editAnnouncementComment(channelID: string, announcementID: string, commentID: number, options: PATCHChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Delete an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to delete.
     */
    deleteAnnouncementComment(channelID: string, announcementID: string, commentID: number): Promise<void>;
    /**
     * Get comments from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement.
     */
    getAnnouncementComments(channelID: string, announcementID: string): Promise<Array<AnnouncementComment>>;
    /**
     * Get a specific comment from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to get.
     */
    getAnnouncementComment(channelID: string, announcementID: string, commentID: number): Promise<AnnouncementComment>;
    /** Create a new item in a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param content String content of the new item.
     * @param note Add a note to the new item.
     */
    createListItem(channelID: string, content: POSTListItemBody["message"], note?: POSTListItemBody["note"]): Promise<ListItem>;
    /** Edit an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     * @param options Edit options.
     */
    editListItem(channelID: string, itemID: string, options?: {
        content?: PATCHListItemBody["message"];
        note?: PATCHListItemBody["note"];
    }): Promise<ListItem>;
    /** Delete an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    deleteListItem(channelID: string, itemID: string): Promise<void>;
    /** Mark a list item as completed.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    completeListItem(channelID: string, itemID: string): Promise<void>;
    /** Mark a list item as uncompleted.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    uncompleteListItem(channelID: string, itemID: string): Promise<void>;
    /** Add a member to a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    memberAddGroup(groupID: string, memberID: string): Promise<void>;
    /** Remove a member from a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    memberRemoveGroup(groupID: string, memberID: string): Promise<void>;
    /** Add a role to a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    memberAddRole(guildID: string, memberID: string, roleID: number): Promise<void>;
    /** Remove a role from a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    memberRemoveRole(guildID: string, memberID: string, roleID: number): Promise<void>;
    /** Edit a member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the the member to edit.
     * @param options Edit options.
     */
    editMember(guildID: string, memberID: string, options: EditMemberOptions): Promise<void>;
    /** Remove a member from a guild.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to kick.
     */
    removeMember(guildID: string, memberID: string): Promise<void>;
    /** Ban a guild member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the member to ban.
     * @param reason The reason of the ban.
     */
    createBan(guildID: string, memberID: string, reason?: string): Promise<BannedMember>;
    /** Unban a guild member.
     * @param guildID ID of the guild the member was in.
     * @param memberID ID of the member to unban.
     */
    removeBan(guildID: string, memberID: string): Promise<void>;
    /** Create a webhook
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     * @param name Name of the new webhook.
     */
    createWebhook(guildID: string, channelID: string, name: string): Promise<Webhook>;
    /** Update a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     * @param options Edit options.
     */
    editWebhook(guildID: string, webhookID: string, options: PUTGuildWebhookBody): Promise<Webhook>;
    /** Delete a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     */
    deleteWebhook(guildID: string, webhookID: string): Promise<void>;
    /** Award a member using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Amount of experience.
     */
    awardMember(guildID: string, memberID: string, amount: number): Promise<number>;
    /** Set a member's xp using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Total amount of experience.
     */
    setMemberXP(guildID: string, memberID: string, amount: number): Promise<number>;
    /** Award every members of a guild having a role using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param roleID ID of a role.
     * @param amount Amount of experience.
     */
    awardRole(guildID: string, roleID: number, amount: number): Promise<void>;
    /**
     * Get every guild roles from a guild.
     * @param guildID ID of the guild where roles are.
     */
    getGuildRoles(guildID: string): Promise<Array<GuildRole>>;
    /**
     * Get a guild role.
     * @param guildID ID of the guild where the role is.
     * @param roleID ID of the role to get.
     */
    getGuildRole(guildID: string, roleID: number): Promise<GuildRole>;
    /**
     * Create a guild role.
     * @param guildID ID of the server you want to create the role in.
     * @param options Create options
     */
    createGuildRole(guildID: string, options: POSTGuildRoleBody): Promise<GuildRole>;
    /**
     * Edit a guild role.
     * @param guildID ID of the server
     * @param roleID ID of the role to edit
     * @param options Edit options
     */
    editGuildRole(guildID: string, roleID: number, options: PATCHGuildRoleBody): Promise<GuildRole>;
    /**
     * Edit guild role permission.
     * @param guildID ID of the guild.
     * @param roleID ID of the role.
     * @param options Permission to edit.
     */
    editGuildRolePermission(guildID: string, roleID: number, options: PATCHGuildRoleUpdateBody): Promise<GuildRole>;
    /**
     * Delete a guild role.
     * @param guildID ID of the guild where the role to delete is in
     * @param roleID ID of the role to delete
     */
    deleteGuildRole(guildID: string, roleID: number): Promise<void>;
    /**
     * Change a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     * @param options Status options
     */
    updateUserStatus(userID: string | "@me", options: PUTUserStatusBody): Promise<void>;
    /**
     * Delete a user's status, this includes the bot's one.
     * @param userID User ID (@me can be used).
     */
    deleteUserStatus(userID: string | "@me"): Promise<void>;
    /**
     * Get guild groups.
     * @param guildID ID of the guild.
     */
    getGuildGroups(guildID: string): Promise<Array<GuildGroup>>;
    /**
     * Get a guild group.
     * @param guildID ID of the guild.
     * @param groupID ID of the group to get.
     */
    getGuildGroup(guildID: string, groupID: string): Promise<GuildGroup>;
    /**
     * Create a guild group.
     * @param guildID The ID of the guild to create a group in.
     * @param options Create options
     */
    createGuildGroup(guildID: string, options: POSTGuildGroupBody): Promise<GuildGroup>;
    /**
     * Edit a guild group.
     * @param guildID The ID of the guild where the group to edit is in
     * @param groupID The ID of the group to edit.
     * @param options Edit options
     */
    editGuildGroup(guildID: string, groupID: string, options: PATCHGuildGroupBody): Promise<GuildGroup>;
    /**
     * Delete a guild group
     * @param guildID ID of the guild where the group is in.
     * @param groupID ID of the group to delete.
     */
    deleteGuildGroup(guildID: string, groupID: string): Promise<void>;
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     */
    getGuildSubscriptions(guildID: string): Promise<Array<GuildSubscription>>;
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     * @param subscriptionID ID of the subscription to get.
     */
    getGuildSubscription(guildID: string, subscriptionID: string): Promise<GuildSubscription>;
    /**
     * Archive a channel.
     * @param channelID ID of the channel to archive.
     */
    archiveChannel(channelID: string): Promise<void>;
    /**
     * Unarchive a channel.
     * @param channelID ID of the channel to unarchive.
     */
    restoreChannel(channelID: string): Promise<void>;
    /**
     * Pin a message.
     * @param channelID ID of the channel where the message is.
     * @param messageID ID of the message to pin.
     */
    pinMessage(channelID: string, messageID: string): Promise<void>;
    /**
     * Unpin a message.
     * @param channelID ID of the channel where the message is.
     * @param messageID ID of the message to unpin.
     */
    unpinMessage(channelID: string, messageID: string): Promise<void>;
    /**
     * Bulk XP Awards Members.
     * @param guildID ID of the guild.
     * @param options Bulk XP options.
     */
    bulkAwardXPMembers(guildID: string, options: POSTBulkAwardXPBody): Promise<POSTBulkAwardXPResponse>;
    /**
     * Bulk XP Set Members.
     * @param guildID ID of the guild.
     * @param options Bulk XP options.
     */
    bulkSetMembersXP(guildID: string, options: PUTBulkSetXPBody): Promise<PUTBulkSetXPResponse>;
    /**
     * Create a guild category
     * @param guildID ID of the guild.
     * @param options Create options.
     */
    createGuildCategory(guildID: string, options: POSTCreateCategoryBody): Promise<GuildCategory>;
    /**
     * Read a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    getGuildCategory(guildID: string, categoryID: number): Promise<GuildCategory>;
    /**
     * Edit a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    editGuildCategory(guildID: string, categoryID: number, options: PATCHUpdateCategoryBody): Promise<GuildCategory>;
    /**
     * Delete a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    deleteGuildCategory(guildID: string, categoryID: number): Promise<GuildCategory>;
    /**
     * Add a new user permission to a channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to assign the permission to
     * @param options Create options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createChannelPermission(guildID: string, channelID: string, targetID: string | number, options: POSTChannelUserPermissionBody | POSTChannelRolePermissionBody): Promise<Permission>;
    /**
     * Update a channel permission.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editChannelPermission(guildID: string, channelID: string, targetID: string | number, options: PATCHChannelRolePermissionBody): Promise<Permission>;
    /**
     * Delete a channel permission.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    deleteChannelPermission(guildID: string, channelID: string, targetID: string | number): Promise<void>;
    /**
     * Get the permissions of a user or role for a specified channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to get the permission
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    getChannelPermission(guildID: string, channelID: string, targetID: string | number): Promise<Permission>;
    getChannelPermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
    /**
     * Get the permissions of every users in the guild for a specified channel.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    getChannelUserPermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
    /**
     * Get existing channel permissions for a specified role.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    getChannelRolePermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
    /**
     * Create a channel category permission assigned to a user or role.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to
     * @param options Permission options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createCategoryPermission(guildID: string, categoryID: number, targetID: string | number, options: POSTChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Update a category permission.
     * @param guildID ID of the server the category is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editCategoryPermission(guildID: string, categoryID: number, targetID: string | number, options: PATCHChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Get permission coming from a category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permission is in
     * @param targetID ID of the user (string) or role (number) to get the permission for
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    getCategoryPermission(guildID: string, categoryID: number, targetID: string | number): Promise<Permission>;
    /**
     * Get permissions of a category.
     * @param guildID ID of the server the category is in.
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryPermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Get user permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryUserPermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Get role permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryRolePermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Delete a category permission.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user or role to delete the permission from
     */
    deleteCategoryPermission(guildID: string, categoryID: number, targetID: string | number): Promise<void>;
}
