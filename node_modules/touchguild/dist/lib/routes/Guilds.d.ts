/** @module Routes/Guilds */
import type { RESTManager } from "../rest/RESTManager";
import { Guild } from "../structures/Guild";
import { Webhook } from "../structures/Webhook";
import { Member } from "../structures/Member";
import { APIChannelCategories, POSTGuildMemberXPBody, POSTGuildRoleXPBody, PUTGuildMemberXPBody, POSTGuildGroupBody, PATCHGuildGroupBody, POSTGuildRoleBody, PATCHGuildRoleBody, Permissions, POSTBulkAwardXPBody, POSTBulkAwardXPResponse, PUTBulkSetXPBody, PUTBulkSetXPResponse, POSTCreateCategoryBody, PATCHUpdateCategoryBody, PATCHGuildRoleUpdateBody, POSTChannelCategoryUserPermissionBody, PATCHChannelCategoryUserPermissionBody } from "../Constants";
import { AnyChannel, CreateChannelOptions, EditChannelOptions } from "../types/channel";
import { EditWebhookOptions } from "../types/webhooks";
import { EditMemberOptions } from "../types/guilds";
import { BannedMember } from "../structures/BannedMember";
import { GuildRole } from "../structures/GuildRole";
import { GuildGroup } from "../structures/GuildGroup";
import { GuildSubscription } from "../structures/GuildSubscription";
import { GuildCategory } from "../structures/GuildCategory";
import { Permission } from "../structures/Permission";
export declare class Guilds {
    #private;
    constructor(manager: RESTManager);
    /** This method is used to get a specific Guild.
     *
     * Note: Guild = Server
     * @param guildID The ID of the guild you'd like to get.
     */
    getGuild(guildID: string): Promise<Guild>;
    /** This method is used to get a specific webhook.
     * @param guildID ID of a guild.
     * @param webhookID ID of a webhook.
     */
    getWebhook(guildID: string, webhookID: string): Promise<Webhook>;
    /** This method is used to get a list of Webhook.
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     */
    getWebhooks(guildID: string, channelID: string): Promise<Array<Webhook>>;
    /** This method is used to get a specific guild member.
     * @param guildID The ID of the Guild.
     * @param memberID The ID of the Guild Member to get.
     */
    getMember(guildID: string, memberID: string): Promise<Member>;
    /** This method is used to get a list of guild member.
     * @param guildID ID of the guild to get members.
     */
    getMembers(guildID: string): Promise<Array<Member>>;
    /** Get a ban.
     * @param guildID ID of the guild.
     * @param memberID ID of the banned member.
     */
    getBan(guildID: string, memberID: string): Promise<BannedMember>;
    /** This method is used to get a list of guild ban.
     * @param guildID ID of the guild.
     */
    getBans(guildID: string): Promise<Array<BannedMember>>;
    /** Add a member to a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    memberAddGroup(groupID: string, memberID: string): Promise<void>;
    /** Remove a member from a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    memberRemoveGroup(groupID: string, memberID: string): Promise<void>;
    /** Add a role to a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    memberAddRole(guildID: string, memberID: string, roleID: number): Promise<void>;
    /** Remove a role from a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    memberRemoveRole(guildID: string, memberID: string, roleID: number): Promise<void>;
    /** Edit a member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the the member to edit.
     * @param options Edit options.
     */
    editMember(guildID: string, memberID: string, options: EditMemberOptions): Promise<void>;
    /** Remove a member from a guild.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to kick.
     */
    removeMember(guildID: string, memberID: string): Promise<void>;
    /** Ban a guild member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the member to ban.
     * @param reason The reason of the ban.
     */
    createBan(guildID: string, memberID: string, reason?: string): Promise<BannedMember>;
    /** Unban a guild member.
     * @param guildID ID of the guild the member was in.
     * @param memberID ID of the member to unban.
     */
    removeBan(guildID: string, memberID: string): Promise<void>;
    /** Create a webhook
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     * @param name Name of the new webhook.
     */
    createWebhook(guildID: string, channelID: string, name: string): Promise<Webhook>;
    /** Update a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     * @param options Edit options.
     */
    editWebhook(guildID: string, webhookID: string, options: EditWebhookOptions): Promise<Webhook>;
    /** Delete a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     */
    deleteWebhook(guildID: string, webhookID: string): Promise<void>;
    /** Award a member using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Amount of experience.
     */
    awardMember(guildID: string, memberID: string, amount: POSTGuildMemberXPBody["amount"]): Promise<number>;
    /** Set a member's xp using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Total amount of experience.
     */
    setMemberXP(guildID: string, memberID: string, amount: PUTGuildMemberXPBody["total"]): Promise<number>;
    /** Award every members of a guild having a role using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param roleID ID of a role.
     * @param amount Amount of experience.
     */
    awardRole(guildID: string, roleID: number, amount: POSTGuildRoleXPBody["amount"]): Promise<void>;
    /** Create a channel in a specified guild.
     * @param guildID ID of a guild.
     * @param name Name of the new channel.
     * @param type Type of the new channel. (e.g: chat)
     * @param options New channel's additional options.
     */
    createChannel<T extends AnyChannel = AnyChannel>(guildID: string, name: string, type: APIChannelCategories, options?: CreateChannelOptions): Promise<T>;
    /** Edit a channel.
     * @param channelID ID of the channel to edit.
     * @param options Channel edit options.
     */
    editChannel<T extends AnyChannel = AnyChannel>(channelID: string, options: EditChannelOptions): Promise<T>;
    /** Delete a channel.
     * @param channelID ID of the channel to delete.
     */
    deleteChannel(channelID: string): Promise<void>;
    /**
     * Get every guild roles from a guild.
     * @param guildID ID of the guild where roles are.
     */
    getRoles(guildID: string): Promise<Array<GuildRole>>;
    /**
     * Get a guild role.
     * @param guildID ID of the guild where the role is.
     * @param roleID ID of the role to get.
     */
    getRole(guildID: string, roleID: number): Promise<GuildRole>;
    /**
     * Create a guild role.
     * @param guildID ID of the server you want to create the role in.
     * @param options Create options
     */
    createRole(guildID: string, options: POSTGuildRoleBody): Promise<GuildRole>;
    /**
     * Edit a guild role.
     * @param guildID ID of the server
     * @param roleID ID of the role to edit
     * @param options Edit options
     */
    editRole(guildID: string, roleID: number, options: PATCHGuildRoleBody): Promise<GuildRole>;
    /**
     * Delete a guild role.
     * @param guildID ID of the guild where the role to delete is in
     * @param roleID ID of the role to delete
     */
    deleteRole(guildID: string, roleID: number): Promise<void>;
    /**
     * Get guild groups.
     * @param guildID ID of the guild.
     */
    getGroups(guildID: string): Promise<Array<GuildGroup>>;
    /**
     * Get a guild group.
     * @param guildID ID of the guild.
     * @param groupID ID of the group to get.
     */
    getGroup(guildID: string, groupID: string): Promise<GuildGroup>;
    /**
     * Create a guild group.
     * @param guildID The ID of the guild to create a group in.
     * @param options Create options
     */
    createGroup(guildID: string, options: POSTGuildGroupBody): Promise<GuildGroup>;
    /**
     * Edit a guild group.
     * @param guildID The ID of the guild where the group to edit is in
     * @param groupID The ID of the group to edit.
     * @param options Edit options
     */
    editGroup(guildID: string, groupID: string, options: PATCHGuildGroupBody): Promise<GuildGroup>;
    /**
     * Delete a guild group
     * @param guildID ID of the guild where the group is in.
     * @param groupID ID of the group to delete.
     */
    deleteGroup(guildID: string, groupID: string): Promise<void>;
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     */
    getSubscriptions(guildID: string): Promise<Array<GuildSubscription>>;
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     * @param subscriptionID ID of the subscription to get.
     */
    getSubscription(guildID: string, subscriptionID: string): Promise<GuildSubscription>;
    /**
     * Get guild member permissions.
     * @param guildID ID of the guild.
     * @param memberID ID of the member.
     */
    getMemberPermission(guildID: string, memberID: string): Promise<Array<Permissions>>;
    /**
     * Edit role permission.
     * @param guildID ID of the guild.
     * @param roleID ID of the role.
     * @param options Permission to edit.
     */
    editRolePermission(guildID: string, roleID: number, options: PATCHGuildRoleUpdateBody): Promise<GuildRole>;
    /**
     * Bulk Award XP Members
     * @param guildID ID of the guild
     * @param options Members to award XP
     */
    bulkAwardXP(guildID: string, options: POSTBulkAwardXPBody): Promise<POSTBulkAwardXPResponse>;
    /**
     * Bulk set XP Members
     * @param guildID ID of the guild
     * @param options Members to set XP
     */
    bulkSetXP(guildID: string, options: PUTBulkSetXPBody): Promise<PUTBulkSetXPResponse>;
    /**
     * Create a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param options Options to create a category.
     */
    createCategory(guildID: string, options: POSTCreateCategoryBody): Promise<GuildCategory>;
    /**
     * Read a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    getCategory(guildID: string, categoryID: number): Promise<GuildCategory>;
    /**
     * Edit a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    editCategory(guildID: string, categoryID: number, options: PATCHUpdateCategoryBody): Promise<GuildCategory>;
    /**
     * Delete a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    deleteCategory(guildID: string, categoryID: number): Promise<GuildCategory>;
    /**
     * Create a channel category permission assigned to a user or role.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to
     * @param options Permission options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createCategoryPermission(guildID: string, categoryID: number, targetID: string | number, options: POSTChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Update a category permission.
     * @param guildID ID of the server the category is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editCategoryPermission(guildID: string, categoryID: number, targetID: string | number, options: PATCHChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Get permission coming from a category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permission is in
     * @param targetID ID of the user (string) or role (number) to get the permission for
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    getCategoryPermission(guildID: string, categoryID: number, targetID: string | number): Promise<Permission>;
    /**
     * Get permissions of a category.
     * @param guildID ID of the server the category is in.
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryPermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Get user permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryUserPermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Get role permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    getCategoryRolePermissions(guildID: string, categoryID: number): Promise<Array<Permission>>;
    /**
     * Delete a category permission.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user or role to delete the permission from
     */
    deleteCategoryPermission(guildID: string, categoryID: number, targetID: string | number): Promise<void>;
}
