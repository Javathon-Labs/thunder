/** @module Routes/Channels */
import type { RESTManager } from "../rest/RESTManager";
import { Doc } from "../structures/Doc";
import { ForumThread } from "../structures/ForumThread";
import { CalendarEvent } from "../structures/CalendarEvent";
import { CalendarEventRSVP } from "../structures/CalendarRSVP";
import { Message } from "../structures/Message";
import { ForumThreadComment } from "../structures/ForumThreadComment";
import { ListItem } from "../structures/ListItem";
import { ChannelReactionTypeBulkDeleteSupported, ChannelReactionTypes, ChannelSubcategoryReactionTypes, DELETEMessageReactionQuery, GETChannelAnnouncementsQuery, PATCHChannelAnnouncementBody, PATCHChannelAnnouncementCommentBody, PATCHListItemBody, POSTCalendarEventBody, POSTChannelAnnouncementBody, POSTChannelAnnouncementCommentBody, POSTListItemBody, POSTChannelRolePermissionBody, PATCHChannelRolePermissionBody, POSTChannelUserPermissionBody } from "../Constants";
import { AnyChannel, AnyTextableChannel, CreateMessageOptions, EditMessageOptions, GetChannelMessagesFilter } from "../types/channel";
import { CreateForumThreadOptions, EditForumThreadOptions, GetForumThreadsFilter } from "../types/forumThread";
import { CreateForumCommentOptions, EditForumCommentOptions } from "../types/forumThreadComment";
import { CreateDocOptions, EditDocOptions } from "../types/doc";
import { CreateCalendarCommentOptions, CreateCalendarEventOptions, EditCalendarCommentOptions, EditCalendarEventOptions, EditCalendarRSVPOptions, GetCalendarEventsFilter } from "../types/calendarEvent";
import { ForumChannel } from "../structures/ForumChannel";
import { CalendarEventComment } from "../structures/CalendarEventComment";
import { CreateDocCommentOptions, EditDocCommentOptions } from "../types/docComment";
import { DocComment } from "../structures/DocComment";
import { Announcement } from "../structures/Announcement";
import { AnnouncementComment } from "../structures/AnnouncementComment";
import { Permission } from "../structures/Permission";
export declare class Channels {
    #private;
    constructor(manager: RESTManager);
    /** This method is used to get a guild channel.
     * @param channelID The ID of the channel to get.
     */
    getChannel(channelID: string): Promise<AnyChannel>;
    /** This method is used to get a channel message.
     * @param channelID The ID of the channel containing the message.
     * @param messageID The ID of the message to get.
     * @param params Optional parameters.
     */
    getMessage<T extends AnyTextableChannel = AnyTextableChannel>(channelID: string, messageID: string, params?: object): Promise<Message<T>>;
    /** This method is used to get a list of Message
     * @param channelID ID of a "Chat" channel.
     * @param filter Object to filter the output.
     */
    getMessages(channelID: string, filter?: GetChannelMessagesFilter): Promise<Array<Message<AnyTextableChannel>>>;
    /** This method is used to get a channel doc.
     *
     * Note: This method requires a "Docs" channel.
     * @param channelID ID of the Docs channel.
     * @param docID ID of the channel doc.
     */
    getDoc(channelID: string, docID: number): Promise<Doc>;
    /** This method is used to get a list of "Channel" Doc.
     * @param channelID ID of a "Docs" channel.
     * @param filter Object to filter the output.
     */
    getDocs(channelID: string, filter?: {
        before?: string;
        limit?: number;
    }): Promise<Array<Doc>>;
    /**
     * Get every comments from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     */
    getDocComments(channelID: string, docID: number): Promise<Array<DocComment>>;
    /**
     * Get a specific comment from a doc.
     * @param channelID ID of the channel containing the doc.
     * @param docID ID of the doc the comment is in.
     * @param commentID ID of the comment to get.
     */
    getDocComment(channelID: string, docID: number, commentID: number): Promise<DocComment>;
    /** This method is used to get a specific forum thread.
     *
     * Note: This method requires a "Forum" channel.
     * @param channelID ID of a speific Forum channel.
     * @param threadID ID of the specific Forum Thread.
     */
    getForumThread(channelID: string, threadID: number): Promise<ForumThread<ForumChannel>>;
    /** This method is used to get a list of ForumThread.
     * @param channelID ID of a "Forum" channel.
     * @param filter Object to filter the output.
     */
    getForumThreads(channelID: string, filter?: GetForumThreadsFilter): Promise<Array<ForumThread<ForumChannel>>>;
    /** This method is used to get a specific forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum thread.
     * @param commentID ID of a Forum thread comment.
     */
    getForumComment(channelID: string, threadID: number, commentID: number): Promise<ForumThreadComment>;
    /** This method is used to get a list of ForumThreadComment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a Forum Thread.
     */
    getForumComments(channelID: string, threadID: number): Promise<Array<ForumThreadComment>>;
    /** This method is used to get a specific calendar event.
     *
     * Note: this method requires a "Calendar" channel.
     * @param channelID ID of a Calendar channel.
     * @param eventID ID of a Calendar event.
     */
    getCalendarEvent(channelID: string, eventID: number): Promise<CalendarEvent>;
    /** This method is used to get a list of CalendarEvent
     * @param channelID ID of a "Calendar" channel.
     * @param filter Object to filter the output.
     */
    getCalendarEvents(channelID: string, filter?: GetCalendarEventsFilter): Promise<Array<CalendarEvent>>;
    /** This method is used to get a specific event comment coming from a calendar.
     * Note: this method doesn't cache scheduled events due to the API's restrictions.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of an event containing the comment to get.
     * @param commentID ID of the comment to get.
     */
    getCalendarEventComment(channelID: string, eventID: number, commentID: number): Promise<CalendarEventComment>;
    /** This method is used to get a list of CalendarEventComment
     * Note: due to API's restrictions, we're not able to cache scheduled events from this method.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of the event containing comments.
     */
    getCalendarEventComments(channelID: string, eventID: number): Promise<Array<CalendarEventComment>>;
    /** This method is used to get a specific CalendarEventRSVP.
     *
     * Note: this method requires a Calendar channel.
     * @param channelID ID of a Calendar channel
     * @param eventID ID of a Calendar Event
     * @param memberID ID of a Guild Member
     */
    getCalendarRsvp(channelID: string, eventID: number, memberID: string): Promise<CalendarEventRSVP>;
    /** This method is used to get a list of CalendarEventRSVP.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    getCalendarRsvps(channelID: string, eventID: number): Promise<Array<CalendarEventRSVP>>;
    /** This method is used to get a specific list item.
     * @param channelID ID of a "List" channel.
     * @param itemID ID of a list item.
     */
    getListItem(channelID: string, itemID: string): Promise<ListItem>;
    /** This method is used to get a list of ListItem.
     * @param channelID ID of a "List" channel.
     */
    getListItems(channelID: string): Promise<Array<ListItem>>;
    /** Send a message in a specified channel.
     * @param channelID ID of the channel.
     * @param options Message options
     * @param params Optional parameters.
     */
    createMessage<T extends AnyTextableChannel = AnyTextableChannel>(channelID: string, options: CreateMessageOptions, params?: object): Promise<Message<T>>;
    /** Edit a specific message coming from a specified channel.
     * @param channelID The ID of the channel.
     * @param messageID The ID of the message you'd like to edit.
     * @param newMessage object containing new message's options.
     * @param params Optional parameters.
     */
    editMessage<T extends AnyTextableChannel = AnyTextableChannel>(channelID: string, messageID: string, newMessage: EditMessageOptions, params?: object): Promise<Message<T>>;
    /** Delete a specific message.
     * @param channelID ID of the channel containing the message.
     * @param messageID ID of the message you'd like to delete.
     */
    deleteMessage(channelID: string, messageID: string): Promise<void>;
    /** Add a reaction to a specified object from a channel.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the object you'd like to add the reaction to. (e.g: a message ID)
     * @param reaction ID of the reaction to add.
     */
    createReaction(channelID: string, channelType: ChannelReactionTypes, targetID: string | number, reaction: number): Promise<void>;
    /** Remove a reaction from a specified message.
     * @param channelID ID of a channel that supports reaction.
     * @param channelType Type of the selected channel. (e.g: "ChannelMessage")
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a message ID)
     * @param reaction ID of the reaction.
     */
    deleteReaction(channelID: string, channelType: ChannelReactionTypes, targetID: string | number, reaction: number): Promise<void>;
    /**
     * Bulk delete every reaction from a target.
     * @param channelID ID of a channel.
     * @param channelType Type of channel.
     * @param targetID Target to remove reactions from it.
     */
    bulkDeleteReactions(channelID: string, channelType: ChannelReactionTypeBulkDeleteSupported, targetID: string | number, filter?: DELETEMessageReactionQuery): Promise<void>;
    /** Add a reaction to a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to add the reaction to. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    createReactionToSubcategory(channelID: string, subcategoryType: ChannelSubcategoryReactionTypes, subcategoryID: string | number, targetID: string | number, reaction: number): Promise<void>;
    /** Remove a reaction from a target from a subcategory (e.g: a comment from Forum Thread)
     * @param channelID ID of a channel that supports reaction.
     * @param subcategoryType Type of the selected subcategory. (e.g: "CalendarEvent")
     * @param subcategoryID ID of the subcategory you selected.
     * @param targetID ID of the target you'd like to remove the reaction from. (e.g: a comment id)
     * @param reaction ID of the reaction to add.
     */
    deleteReactionFromSubcategory(channelID: string, subcategoryType: ChannelSubcategoryReactionTypes, subcategoryID: string | number, targetID: string | number, reaction: number): Promise<void>;
    /** Create a forum thread in a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param options Thread's options including title & content.
     */
    createForumThread<T extends ForumChannel = ForumChannel>(channelID: string, options: CreateForumThreadOptions): Promise<ForumThread<T>>;
    /** Edit a forum thread from a specified forum channel.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Edit options.
     */
    editForumThread<T extends ForumChannel = ForumChannel>(channelID: string, threadID: number, options: EditForumThreadOptions): Promise<ForumThread<T>>;
    /** Delete a forum thread from a specific forum channel
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    deleteForumThread(channelID: string, threadID: number): Promise<void>;
    /** Pin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    pinForumThread(channelID: string, threadID: number): Promise<void>;
    /** Unpin a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    unpinForumThread(channelID: string, threadID: number): Promise<void>;
    /** Lock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    lockForumThread(channelID: string, threadID: number): Promise<void>;
    /** Unlock a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     */
    unlockForumThread(channelID: string, threadID: number): Promise<void>;
    /** Add a comment to a forum thread.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param options Comment's options.
     */
    createForumComment(channelID: string, threadID: number, options: CreateForumCommentOptions): Promise<ForumThreadComment>;
    /** Edit a forum thread's comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a thread comment.
     * @param options Edit options.
     */
    editForumComment(channelID: string, threadID: number, commentID: number, options?: EditForumCommentOptions): Promise<ForumThreadComment>;
    /** Delete a forum thread comment.
     * @param channelID ID of a "Forums" channel.
     * @param threadID ID of a forum thread.
     * @param commentID ID of a forum thread comment.
     */
    deleteForumComment(channelID: string, threadID: number, commentID: number): Promise<void>;
    /** Create a doc in a "Docs" channel.
     * @param channelID ID pf a "Docs" channel.
     * @param options Doc's options.
     */
    createDoc(channelID: string, options: CreateDocOptions): Promise<Doc>;
    /** Edit a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     * @param options Edit options.
     */
    editDoc(channelID: string, docID: number, options: EditDocOptions): Promise<Doc>;
    /** Delete a doc from a "Docs" channel.
     * @param channelID ID of a "Docs" channel.
     * @param docID ID of a doc.
     */
    deleteDoc(channelID: string, docID: number): Promise<void>;
    /**
     * Create a comment in a doc.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param options Create options.
     */
    createDocComment(channelID: string, docID: number, options: CreateDocCommentOptions): Promise<DocComment>;
    /**
     * Edit a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    editDocComment(channelID: string, docID: number, commentID: number, options: EditDocCommentOptions): Promise<DocComment>;
    /**
     * Delete a doc comment.
     * @param channelID ID of the docs channel.
     * @param docID ID of the doc.
     * @param commentID ID of the comment to delete.
     */
    deleteDocComment(channelID: string, docID: number, commentID: number): Promise<void>;
    /** Create an event into a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param options Event options.
     * @param createSeries (optional) Create a series. (event's repetition)
     */
    createCalendarEvent(channelID: string, options: CreateCalendarEventOptions, createSeries?: POSTCalendarEventBody["repeatInfo"]): Promise<CalendarEvent>;
    /** Edit an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param options Edit options.
     */
    editCalendarEvent(channelID: string, eventID: number, options: EditCalendarEventOptions): Promise<CalendarEvent>;
    /**
     * The Guilded API only allows series on the event's creation.
     *
     * **Use createCalendarEvent and set the createSeries property to create a series.**
     */
    createCalendarEventSeries(): Error;
    /**
     * Edit a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     * @param options Edit repetition options.
     */
    editCalendarEventSeries(channelID: string, eventID: number, seriesID: string, options: POSTCalendarEventBody["repeatInfo"]): Promise<void>;
    /**
     * Delete a CalendarEventSeries.
     * @param channelID ID of the channel.
     * @param eventID ID of the event.
     * @param seriesID ID of the series.
     */
    deleteCalendarEventSeries(channelID: string, eventID: number, seriesID: string): Promise<void>;
    /** Create a comment inside a calendar event.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of a calendar event.
     * @param options Comment options, includes content, and more.
     */
    createCalendarComment(channelID: string, eventID: number, options: CreateCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Edit an existing calendar event comment.
     * @param channelID The ID of a "Calendar" channel.
     * @param eventID The ID of an event from the channel.
     * @param commentID The ID of the comment to edit.
     * @param options Edit options.
     */
    editCalendarComment(channelID: string, eventID: number, commentID: number, options: EditCalendarCommentOptions): Promise<CalendarEventComment>;
    /** Delete a comment from a calendar event.
     * @param channelID ID of the channel containing the event.
     * @param eventID ID of the event containing the comment.
     * @param commentID ID of the comment to delete.
     */
    deleteCalendarComment(channelID: string, eventID: number, commentID: number): Promise<void>;
    /** Delete an event from a "Calendar" channel.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     */
    deleteCalendarEvent(channelID: string, eventID: number): Promise<void>;
    /** Add/Edit a RSVP in a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     * @param options Edit options.
     */
    editCalendarRsvp(channelID: string, eventID: number, memberID: string, options: EditCalendarRSVPOptions): Promise<CalendarEventRSVP>;
    /** Delete a RSVP from a calendar event.
     * @param channelID ID of a "Calendar" channel.
     * @param eventID ID of a calendar event.
     * @param memberID ID of a member.
     */
    deleteCalendarRsvp(channelID: string, eventID: number, memberID: string): Promise<void>;
    /**
     * Bulk create/update calendar rsvps.
     * @param channelID ID of the Calendar channel.
     * @param eventID ID of a calendar event.
     * @param memberIDs List of multiple member ids.
     * @param options Update options.
     */
    bulkCalendarRsvpUpdate(channelID: string, eventID: number, memberIDs: Array<string>, options: EditCalendarRSVPOptions): Promise<void>;
    /** Create a new item in a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param content String content of the new item.
     * @param note Add a note to the new item.
     */
    createListItem(channelID: string, content: POSTListItemBody["message"], note?: POSTListItemBody["note"]): Promise<ListItem>;
    /** Edit an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     * @param options Edit options.
     */
    editListItem(channelID: string, itemID: string, options?: {
        content?: PATCHListItemBody["message"];
        note?: PATCHListItemBody["note"];
    }): Promise<ListItem>;
    /** Delete an item from a list channel.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    deleteListItem(channelID: string, itemID: string): Promise<void>;
    /** Mark a list item as completed.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    completeListItem(channelID: string, itemID: string): Promise<void>;
    /** Mark a list item as uncompleted.
     * @param channelID ID of a "Lists" channel.
     * @param itemID ID of a list item.
     */
    uncompleteListItem(channelID: string, itemID: string): Promise<void>;
    /**
     * Create a new announcement within an announcement channel.
     * @param channelID ID of the Announcement channel.
     * @param options Announcement creation options.
     */
    createAnnouncement(channelID: string, options: POSTChannelAnnouncementBody): Promise<Announcement>;
    /**
     * Edit an existing announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to edit.
     * @param options Edit options
     */
    editAnnouncement(channelID: string, announcementID: string, options: PATCHChannelAnnouncementBody): Promise<Announcement>;
    /**
     * Delete an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to delete.
     */
    deleteAnnouncement(channelID: string, announcementID: string): Promise<void>;
    /**
     * Get a list of announcements from a channel.
     * @param channelID ID of an Announcement channel.
     * @param filter Filter to apply.
     */
    getAnnouncements(channelID: string, filter?: GETChannelAnnouncementsQuery): Promise<Array<Announcement>>;
    /**
     * Get a specific announcement from a channel.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement to get.
     */
    getAnnouncement(channelID: string, announcementID: string): Promise<Announcement>;
    /**
     * Create a comment inside an announcement.
     * @param channelID ID of the Announcement channel.
     * @param announcementID ID of the announcement to create the comment in.
     * @param options Comment creation options.
     */
    createAnnouncementComment(channelID: string, announcementID: string, options: POSTChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Edit an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement where the comment is in.
     * @param commentID ID of the comment to edit.
     * @param options Edit options.
     */
    editAnnouncementComment(channelID: string, announcementID: string, commentID: number, options: PATCHChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Delete an announcement comment.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to delete.
     */
    deleteAnnouncementComment(channelID: string, announcementID: string, commentID: number): Promise<void>;
    /**
     * Get comments from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of an announcement.
     */
    getAnnouncementComments(channelID: string, announcementID: string): Promise<Array<AnnouncementComment>>;
    /**
     * Get a specific comment from an announcement.
     * @param channelID ID of an Announcement channel.
     * @param announcementID ID of the announcement where the comment is in.
     * @param commentID ID of the comment to get.
     */
    getAnnouncementComment(channelID: string, announcementID: string, commentID: number): Promise<AnnouncementComment>;
    /**
     * Archive a channel.
     * @param guildID ID of the guild where the channel to archive is in
     * @param channelID ID of the channel to archive
     */
    archiveChannel(channelID: string): Promise<void>;
    /**
     * Restore a channel.
     * @param guildID ID of the guild where the channel to restore is in
     * @param channelID ID of the channel to restore
     */
    restoreChannel(channelID: string): Promise<void>;
    /**
     * Pin a message.
     * @param channelID ID of the channel where the message to pin is in
     * @param messageID ID of the message to pin
     */
    pinMessage(channelID: string, messageID: string): Promise<void>;
    /**
     * Unpin a message.
     * @param channelID ID of the channel where the message to unpin is in
     * @param messageID ID of the message to unpin
     */
    unpinMessage(channelID: string, messageID: string): Promise<void>;
    /**
     * Add a new user permission to a channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to assign the permission to
     * @param options Create options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createPermission(guildID: string, channelID: string, targetID: string | number, options: POSTChannelUserPermissionBody | POSTChannelRolePermissionBody): Promise<Permission>;
    /**
     * Update a channel permission.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editPermission(guildID: string, channelID: string, targetID: string | number, options: PATCHChannelRolePermissionBody): Promise<Permission>;
    /**
     * Delete a channel permission.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the target user (string) or role (number)
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    deletePermission(guildID: string, channelID: string, targetID: string | number): Promise<void>;
    /**
     * Get the permissions of a user or role for a specified channel.
     * @param guildID ID of the guild the channel is in
     * @param channelID ID of the channel
     * @param targetID ID of the user or role to get the permission
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    getPermission(guildID: string, channelID: string, targetID: string | number): Promise<Permission>;
    getPermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
    /**
     * Get the permissions of every users in the guild for a specified channel.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    getUserPermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
    /**
     * Get existing channel permissions for a specified role.
     * @param guildID ID of the guild where the channel is in
     * @param channelID ID of the channel
     */
    getRolePermissions(guildID: string, channelID: string): Promise<Array<Permission>>;
}
