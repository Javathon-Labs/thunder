"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Message = void 0;
const Member_1 = require("./Member");
const Guild_1 = require("./Guild");
const Base_1 = require("./Base");
/** Represents a guild message. */
class Message extends Base_1.Base {
    /** Raw data. */
    #data;
    /** ID of the message's original message. */
    #originalMessageID;
    #originalMessageBool;
    constructor(data, client, params) {
        super(data.id, client);
        this.#data = data;
        this.type = data.type;
        this.guildID = data.serverId ?? null;
        this.channelID = data.channelId;
        this.content = data.content ?? "";
        this.hiddenLinkPreviewUrls = data.hiddenLinkPreviewUrls ?? [];
        this.embeds = data.embeds ?? [];
        this.replyMessageIds = data.replyMessageIds ?? [];
        this.isPrivate = data.isPrivate ?? false;
        this.isSilent = data.isSilent ?? false;
        this.mentions = data.mentions ?? null;
        this.createdAt = new Date(data.createdAt);
        this.editedTimestamp = data.updatedAt ? new Date(data.updatedAt) : null;
        this.memberID = data.createdBy;
        this.webhookID = data.createdByWebhookId ?? null;
        this.deletedAt = data["deletedAt"] ? new Date(data["deletedAt"]) : null;
        this._lastMessageID = null;
        this.#originalMessageID = params?.originalMessageID ?? null;
        this.#originalMessageBool = false;
        this.update(data);
    }
    toJSON() {
        return {
            ...super.toJSON(),
            type: this.type,
            guildID: this.guildID,
            channelID: this.channelID,
            content: this.content,
            hiddenLinkPreviewUrls: this.hiddenLinkPreviewUrls,
            embeds: this.embeds,
            replyMessageIds: this.replyMessageIds,
            isPrivate: this.isPrivate,
            isSilent: this.isSilent,
            mentions: this.mentions,
            createdAt: this.createdAt,
            editedTimestamp: this.editedTimestamp,
            memberID: this.memberID,
            webhookID: this.webhookID,
            deletedAt: this.deletedAt
        };
    }
    update(data) {
        if (data.channelId !== undefined) {
            this.channelID = data.channelId;
        }
        if (data.content !== undefined) {
            this.content = data.content;
        }
        if (data.createdAt !== undefined) {
            this.createdAt = new Date(data.createdAt);
        }
        if (data.createdBy !== undefined) {
            this.memberID = data.createdBy;
        }
        if (data.createdByWebhookId !== undefined) {
            this.webhookID = data.createdByWebhookId;
        }
        if (data.embeds !== undefined) {
            this.embeds = data.embeds;
        }
        if (data.id !== undefined) {
            this.id = data.id;
        }
        if (data.isPrivate !== undefined) {
            this.isPrivate = data.isPrivate;
        }
        if (data.isSilent !== undefined) {
            this.isSilent = data.isSilent;
        }
        if (data.mentions !== undefined) {
            this.mentions = data.mentions;
        }
        if (data.replyMessageIds !== undefined) {
            this.replyMessageIds = data.replyMessageIds;
        }
        if (data.serverId !== undefined) {
            this.guildID = data.serverId;
        }
        if (data.type !== undefined) {
            this.type = data.type;
        }
        if (data.updatedAt !== undefined) {
            this.editedTimestamp = new Date(data.updatedAt);
        }
    }
    /** Retrieve message's member.
     *
     * Make sure to await this property (getter) to still get results even if the member is not cached.
     * @note The API does not provide member information, that's why you might need to await this property.
     */
    get member() {
        const guild = this.client.guilds.get(this.guildID);
        if (guild?.members?.get(this.memberID) && this.memberID) {
            return guild?.members?.get(this.memberID);
        }
        else if (this.memberID && this.guildID) {
            const restMember = this.client.rest.guilds.getMember(this.guildID, this.memberID);
            void this.setCache(restMember);
            return (guild?.members.get(this.memberID) ?? restMember);
        }
        else {
            const channel = this.client.getChannel(this.guildID, this.channelID);
            const message = channel?.messages?.get(this.id);
            if (message instanceof Message && message.guildID && message.memberID) {
                const restMember = this.client.rest.guilds.getMember(message.guildID, message.memberID);
                void this.setCache(restMember);
                return restMember;
            }
            return undefined;
        }
    }
    /** The guild the message is in. This will throw an error if the guild isn't cached.*/
    get guild() {
        if (!this.guildID)
            throw new Error(`Couldn't get ${this.constructor.name}#guildID. (guild cannot be retrieved)`);
        if (!this._cachedGuild) {
            this._cachedGuild = this.client.getGuild(this.guildID);
            if (!this._cachedGuild) {
                throw new Error(`${this.constructor.name}#guild: couldn't find the Guild in cache.`);
            }
        }
        return this._cachedGuild;
    }
    /** The channel this message was created in.  */
    get channel() {
        if (!this.guildID)
            throw new Error(`Couldn't get ${this.constructor.name}#guildID. (channel cannot be retrieved)`);
        if (!this.channelID)
            throw new Error(`Couldn't get ${this.constructor.name}#channelID. (channel cannot be retrieved)`);
        return this._cachedChannel ?? (this._cachedChannel = this.client.getChannel(this.guildID, this.channelID));
    }
    async setCache(obj) {
        const guild = this.client.guilds.get(this.guildID);
        const awaitedObj = await obj;
        if (guild && awaitedObj instanceof Member_1.Member) {
            guild?.members?.add(awaitedObj);
            if (awaitedObj.user)
                this.client.users.add(awaitedObj.user);
        }
        else if (awaitedObj instanceof Guild_1.Guild) {
            this.client.guilds.add(awaitedObj);
        }
    }
    /** This method is used to create a message following this message.
     *
     * Note: this method DOES NOT reply to the current message, you have to do it yourself.
     * @param options Message options.
     */
    async createMessage(options) {
        const response = await this.client.rest.channels.createMessage(this.channelID, options, { originalMessageID: this.#originalMessageID });
        this._lastMessageID = response.id;
        if (this.#originalMessageBool === false) {
            this.#originalMessageBool = true;
            this.#originalMessageID = response.id;
        }
        return response;
    }
    /** This method is used to edit the current message.
     * @param newMessage New message's options
     */
    async edit(newMessage) {
        return this.client.rest.channels.editMessage(this.channelID, this.id, newMessage, { originalMessageID: this.#originalMessageID });
    }
    /** This method is used to delete the current message. */
    async delete() {
        return this.client.rest.channels.deleteMessage(this.channelID, this.id);
    }
    /** Edit the last message sent with the message itself.
     * @param newMessage New message's options.
     */
    async editLast(newMessage) {
        if (!this._lastMessageID)
            throw new TypeError("Can't edit last message if it does not exist.");
        return this.client.rest.channels.editMessage(this.channelID, this._lastMessageID, newMessage);
    }
    /** Delete the last message sent with the message itself. */
    async deleteLast() {
        if (!this._lastMessageID)
            throw new TypeError("Can't delete last message if it does not exist.");
        return this.client.rest.channels.deleteMessage(this.channelID, this._lastMessageID);
    }
    /** Edit the message's original response message.
     * @param newMessage New message's options.
     */
    async editOriginal(newMessage) {
        if (!this.#originalMessageID)
            throw new TypeError("Can't edit original message if it does not exist.");
        return this.client.rest.channels.editMessage(this.channelID, this.#originalMessageID, newMessage, { originalMessageID: this.#originalMessageID });
    }
    /** Delete the message's original response message. */
    async deleteOriginal() {
        if (!this.#originalMessageID)
            throw new TypeError("Can't delete original message if it does not exist.");
        return this.client.rest.channels.deleteMessage(this.channelID, this.#originalMessageID);
    }
    /** Add a reaction to this message.
     * @param reaction ID of a reaction/emote.
     */
    async createReaction(reaction) {
        return this.client.rest.channels.createReaction(this.channelID, "ChannelMessage", this.id, reaction);
    }
    /** Remove a reaction from this message.
     * @param reaction ID of a reaction/emote.
     */
    async deleteReaction(reaction) {
        return this.client.rest.channels.deleteReaction(this.channelID, "ChannelMessage", this.id, reaction);
    }
    /** Pin this message */
    async pin() {
        return this.client.rest.channels.pinMessage(this.channelID, this.id);
    }
    /** Unpin this message */
    async unpin() {
        return this.client.rest.channels.unpinMessage(this.channelID, this.id);
    }
}
exports.Message = Message;
//# sourceMappingURL=data:application/json;base64,