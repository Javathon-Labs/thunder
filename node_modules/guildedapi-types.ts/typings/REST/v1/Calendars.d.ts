import { APICalendarEvent, APICalendarEventComment, APICalendarEventRSVP, APICalendarEventRSVPStatuses } from "../../payloads";
export interface POSTCalendarEventBody {
    name: string;
    description?: string;
    location?: string;
    startsAt?: string;
    url?: string;
    color?: number;
    isAllDay?: boolean;
    rsvpLimit?: number;
    autofillWaitlist?: boolean;
    duration?: number;
    isPrivate?: boolean;
    roleIds?: Array<number>;
    repeatInfo?: {
        type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
        every?: {
            count: number;
            interval: "day" | "week" | "month" | "year";
        };
        endsAfterOccurrences?: number;
        endDate?: string;
        on?: Array<"sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday">;
    };
}
export interface POSTCalendarEventResponse {
    calendarEvent: APICalendarEvent;
}
export interface GETCalendarEventsQuery {
    before?: string;
    after?: string;
    limit?: number;
}
export interface GETCalendarEventsResponse {
    calendarEvents: Array<APICalendarEvent>;
}
export interface GETCalendarEventResponse {
    calendarEvent: APICalendarEvent;
}
export interface PATCHCalendarEventBody {
    name?: string;
    description?: string;
    location?: string;
    startsAt?: string;
    url?: string;
    color?: number;
    isAllDay?: boolean;
    rsvpLimit?: number;
    autofillWaitlist?: boolean;
    duration?: number;
    isPrivate?: boolean;
    roleIds?: Array<number>;
    repeatInfo?: {
        type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
        every?: {
            count: number;
            interval: "day" | "week" | "month" | "year";
        };
        endsAfterOccurrences?: number;
        endDate?: string;
        on?: Array<"sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday">;
    };
    cancellation?: {
        description?: string;
    };
}
export interface PATCHCalendarEventResponse {
    calendarEvent: APICalendarEvent;
}
export interface GETCalendarEventRSVPResponse {
    calendarEventRsvp: APICalendarEventRSVP;
}
export interface PUTCalendarEventRSVPBody {
    status: APICalendarEventRSVPStatuses;
}
export interface PUTCalendarEventRSVPResponse {
    calendarEventRsvp: APICalendarEventRSVP;
}
export interface GETCalendarEventRSVPSResponse {
    calendarEventRsvps: Array<APICalendarEventRSVP>;
}
export interface POSTCalendarEventCommentBody {
    content: string;
}
export interface POSTCalendarEventCommentResponse {
    calendarEventComment: APICalendarEventComment;
}
export interface GETCalendarEventCommentsResponse {
    calendarEventComments: Array<APICalendarEventComment>;
}
export interface GETCalendarEventCommentResponse {
    calendarEventComment: APICalendarEventComment;
}
export interface PATCHCalendarEventCommentBody {
    content: string;
}
export interface PATCHCalendarEventCommentResponse {
    calendarEventComment: APICalendarEventComment;
}
export interface PATCHCalendarEventSeriesBody extends PATCHCalendarEventBody {
    repeatInfo?: {
        type: "once" | "everyDay" | "everyWeek" | "everyMonth" | "custom";
        every?: {
            count: number;
            interval: "day" | "week" | "month" | "year";
        };
        endsAfterOccurrences?: number;
        endDate?: string;
        on?: Array<"sunday" | "monday" | "tuesday" | "wednesday" | "thursday" | "friday" | "saturday">;
    };
    calendarEventId?: number;
}
export interface DELETECalendarEventSeriesBody {
    calendarEventId?: number;
}
export interface PUTCalendarEventRSVPBulkBody {
    userIds: Array<string>;
    status: "going" | "maybe" | "declined" | "invited";
}
//# sourceMappingURL=Calendars.d.ts.map