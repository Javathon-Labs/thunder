/** @module AnnouncementComment */
import { Client } from "./Client";
import { Base } from "./Base";
import { Member } from "./Member";
import { APIAnnouncementComment, APIMentions, PATCHChannelAnnouncementCommentBody, POSTChannelAnnouncementCommentBody } from "../Constants";
import { ConstructorCalendarEventCommentOptions } from "../types/calendarEventComment";
import { JSONAnnouncementComment } from "../types/json";
/** AnnouncementComment represents a comment from an Announcement channel. */
export declare class AnnouncementComment extends Base<number> {
    /** Announcement content */
    content: string;
    /** The date when the comment was created. */
    createdAt: Date;
    /** The date when the comment was edited, if edited. */
    editedTimestamp: Date | null;
    /** ID of the member who sent this announcement. */
    memberID: string;
    /** ID of the channel where the comment is in. */
    channelID: string;
    /** ID of the parent announcement. */
    announcementID: string;
    /** Mentions */
    mentions: APIMentions | null;
    /** ID of the guild, if received. */
    guildID: string | null;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APIAnnouncementComment, client: Client, options?: ConstructorCalendarEventCommentOptions);
    toJSON(): JSONAnnouncementComment;
    protected update(data: APIAnnouncementComment): void;
    /** Retrieve the member who sent this comment, if cached.
     * If there is no cached member, this will make a rest request which returns a Promise.
     * If the request fails, it'll return undefined or throw an error that you can catch.
     */
    get member(): Member | Promise<Member> | undefined;
    /**
     * Edit this comment.
     * @param options Edit options
     */
    edit(options: PATCHChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Delete this comment.
     */
    delete(): Promise<void>;
    /**
     * Create a comment in the same announcement as this one.
     * @param options Create options.
     */
    createComment(options: POSTChannelAnnouncementCommentBody): Promise<AnnouncementComment>;
    /**
     * Add a reaction to this comment.
     * @param reactionID ID of the emote to add
     */
    createReaction(emoteID: number): Promise<void>;
    /**
     * Remove a reaction from this comment.
     * @param reactionID ID of the emote to remove
     */
    deleteReaction(emoteID: number): Promise<void>;
}
