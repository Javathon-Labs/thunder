/** @module ForumThread */
import { Client } from "./Client";
import { Guild } from "./Guild";
import { Member } from "./Member";
import { Base } from "./Base";
import { User } from "./User";
import { ForumThreadComment } from "./ForumThreadComment";
import { ForumChannel } from "./ForumChannel";
import { APIForumTopic, APIForumTopicComment, APIMentions } from "../Constants";
import { EditForumThreadOptions } from "../types/forumThread";
import { CreateForumCommentOptions } from "../types/forumThreadComment";
import TypedCollection from "../util/TypedCollection";
import { JSONForumThread } from "../types/json";
import { AnyTextableChannel } from "../types/channel";
/** Represents a thread/topic coming from a "Forums" channel. */
export declare class ForumThread<T extends ForumChannel> extends Base<number> {
    private _cachedChannel;
    private _cachedGuild?;
    /** Guild ID */
    guildID: string;
    /** Forum channel id */
    channelID: string;
    /** Name of the thread */
    name: string;
    /** When this forum thread was created. */
    createdAt: Date;
    /** Owner of this thread, if cached. */
    owner: T extends Guild ? Member : Member | User | Promise<Member> | undefined;
    /** The ID of the owner of this thread. */
    ownerID: string;
    /** Timestamp at which this channel was last edited. */
    editedTimestamp: Date | null;
    /** Timestamp (unix epoch time) that the forum thread was bumped at. */
    bumpedAt: Date | null;
    /** Content of the thread */
    content: string;
    /** Thread mentions */
    mentions: APIMentions | null;
    /** Cached comments. */
    comments: TypedCollection<number, APIForumTopicComment, ForumThreadComment>;
    /** If true, the thread is locked. */
    isLocked: boolean;
    /** If true, the thread is pinned. */
    isPinned: boolean;
    /**
     * @param data raw data
     * @param client client
     */
    constructor(data: APIForumTopic, client: Client);
    toJSON(): JSONForumThread;
    protected update(data: APIForumTopic): void;
    /** The guild the thread is in. This will throw an error if the guild isn't cached.*/
    get guild(): T extends Guild ? Guild : Guild | null;
    /** The forum channel this thread was created in.  */
    get channel(): T extends AnyTextableChannel ? T : undefined;
    /** Add a comment to this forum thread.
     * @param options Options of the comment.
     */
    createForumComment(options: CreateForumCommentOptions): Promise<ForumThreadComment>;
    /** Edit the forum thread.
     * @param options Edit options.
     */
    edit(options: EditForumThreadOptions): Promise<ForumThread<T>>;
    /** Delete this forum thread. */
    delete(): Promise<void>;
    /** Pin this forum thread. */
    pin(): Promise<void>;
    /** Unpin this forum thread. */
    unpin(): Promise<void>;
    /** Lock this forum thread. */
    lock(): Promise<void>;
    /** Unlock this forum thread. */
    unlock(): Promise<void>;
    /** Add a reaction to this forum thread.
     * @param emoteID ID of the emote to be added.
     */
    createReaction(emoteID: number): Promise<void>;
    /** Remove a reaction from this forum thread.
     * @param emoteID ID of the emote to be added.
     */
    deleteReaction(emoteID: number): Promise<void>;
}
