/** @module Message */
import { Client } from "./Client";
import { Member } from "./Member";
import { Guild } from "./Guild";
import { Base } from "./Base";
import { APIChatMessage, APIEmbedOptions, APIMentions, APIMessageOptions } from "../Constants";
import { JSONMessage } from "../types/json";
import { AnyTextableChannel } from "../types/channel";
/** Represents a guild message. */
export declare class Message<T extends AnyTextableChannel> extends Base<string> {
    #private;
    private _cachedChannel;
    private _cachedGuild?;
    /** Message type. */
    type: string;
    /** ID of the server on which the message was sent. */
    guildID: string | null;
    /** ID of the channel on which the message was sent. */
    channelID: string;
    /** Content of the message. */
    content: string | null;
    /** Links in content to prevent unfurling as a link preview when displaying in Guilded (min items 1; must have unique items true) */
    hiddenLinkPreviewUrls?: Array<string>;
    /** Array of message embed. */
    embeds?: Array<APIEmbedOptions> | [];
    /** The IDs of the message replied by the message. */
    replyMessageIds: Array<string>;
    /** If true, the message appears as private. */
    isPrivate: boolean;
    /** If true, the message didn't mention anyone. */
    isSilent: boolean;
    /** object containing all mentioned users. */
    mentions: APIMentions;
    /** ID of the message author. */
    memberID: string;
    /** ID of the webhook used to send this message. (if sent by a webhook) */
    webhookID?: string | null;
    /** When the message was created. */
    createdAt: Date;
    /** Timestamp at which this message was last edited. */
    editedTimestamp: Date | null;
    /** When the message was deleted. */
    deletedAt: Date | null;
    /** ID of the last message created with the message itself. */
    _lastMessageID: string | null;
    constructor(data: APIChatMessage, client: Client, params?: {
        originalMessageID?: string | null;
    });
    toJSON(): JSONMessage;
    protected update(data: APIChatMessage): void;
    /** Retrieve message's member.
     *
     * Make sure to await this property (getter) to still get results even if the member is not cached.
     * @note The API does not provide member information, that's why you might need to await this property.
     */
    get member(): T extends Guild ? Member : Member | Promise<Member> | undefined;
    /** The guild the message is in. This will throw an error if the guild isn't cached.*/
    get guild(): T extends Guild ? Guild : Guild | null;
    /** The channel this message was created in.  */
    get channel(): T extends AnyTextableChannel ? T : undefined;
    private setCache;
    /** This method is used to create a message following this message.
     *
     * Note: this method DOES NOT reply to the current message, you have to do it yourself.
     * @param options Message options.
     */
    createMessage(options: APIMessageOptions): Promise<Message<T>>;
    /** This method is used to edit the current message.
     * @param newMessage New message's options
     */
    edit(newMessage: {
        content?: string;
        embeds?: Array<APIEmbedOptions>;
    }): Promise<Message<T>>;
    /** This method is used to delete the current message. */
    delete(): Promise<void>;
    /** Edit the last message sent with the message itself.
     * @param newMessage New message's options.
     */
    editLast(newMessage: {
        content?: string;
        embeds?: Array<APIEmbedOptions>;
    }): Promise<Message<T>>;
    /** Delete the last message sent with the message itself. */
    deleteLast(): Promise<void>;
    /** Edit the message's original response message.
     * @param newMessage New message's options.
     */
    editOriginal(newMessage: {
        content?: string;
        embeds?: Array<APIEmbedOptions>;
    }): Promise<Message<T>>;
    /** Delete the message's original response message. */
    deleteOriginal(): Promise<void>;
    /** Add a reaction to this message.
     * @param reaction ID of a reaction/emote.
     */
    createReaction(reaction: number): Promise<void>;
    /** Remove a reaction from this message.
     * @param reaction ID of a reaction/emote.
     */
    deleteReaction(reaction: number): Promise<void>;
    /** Pin this message */
    pin(): Promise<void>;
    /** Unpin this message */
    unpin(): Promise<void>;
}
