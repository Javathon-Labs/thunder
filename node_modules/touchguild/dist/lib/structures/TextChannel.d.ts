/** @module TextChannel */
import { Client } from "./Client";
import { Message } from "./Message";
import { GuildChannel } from "./GuildChannel";
import { Permission } from "./Permission";
import { AnyTextableChannel, EditMessageOptions } from "../types/channel";
import type { APIChatMessage, APIGuildChannel, APIMessageOptions, PATCHChannelRolePermissionBody, POSTChannelRolePermissionBody } from "../Constants";
import TypedCollection from "../util/TypedCollection";
import { JSONTextChannel } from "../types/json";
/** Represents a guild channel. */
export declare class TextChannel extends GuildChannel {
    /** Cached messages. */
    messages: TypedCollection<string, APIChatMessage, Message<AnyTextableChannel>>;
    /**
     * @param data raw data
     * @param client client
     */
    constructor(data: APIGuildChannel, client: Client);
    /** Create a message in this channel.
     * @param options Message options.
     */
    createMessage(options: APIMessageOptions): Promise<Message<TextChannel>>;
    /** Edit a message from this channel.
     * @param options Message options.
     */
    editMessage(messageID: string, options: EditMessageOptions): Promise<Message<TextChannel>>;
    /** Delete a message from this channel.
     * @param options Message options.
     */
    deleteMessage(messageID: string): Promise<void>;
    /** Create Channel Role Permissions
     * @param targetID ID of the target object (role or user) to assign the permission to.
     * @param options Create options.
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createPermission(targetID: string | number, options: POSTChannelRolePermissionBody): Promise<Permission>;
    /**
     * Edit a channel permission.
     * @param targetID ID of the target object (role or user) the permission is assigned to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editPermission(targetID: string | number, options: PATCHChannelRolePermissionBody): Promise<Permission>;
    /**
     * Delete an existing permission set on this channel.
     * @param targetID ID of the target object (role or user) the permission is assigned to.
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    deletePermission(targetID: string | number): Promise<void>;
    toJSON(): JSONTextChannel;
}
