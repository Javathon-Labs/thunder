"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guilds = void 0;
const tslib_1 = require("tslib");
const endpoints = tslib_1.__importStar(require("../rest/endpoints"));
const Webhook_1 = require("../structures/Webhook");
const Channel_1 = require("../structures/Channel");
const BannedMember_1 = require("../structures/BannedMember");
const Permission_1 = require("../structures/Permission");
class Guilds {
    #manager;
    constructor(manager) {
        this.#manager = manager;
    }
    /** This method is used to get a specific Guild.
     *
     * Note: Guild = Server
     * @param guildID The ID of the guild you'd like to get.
     */
    async getGuild(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD(guildID)
        }).then(data => this.#manager.client.util.updateGuild(data.server));
    }
    /** This method is used to get a specific webhook.
     * @param guildID ID of a guild.
     * @param webhookID ID of a webhook.
     */
    async getWebhook(guildID, webhookID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_WEBHOOK(guildID, webhookID)
        }).then(data => new Webhook_1.Webhook(data.webhook, this.#manager.client));
    }
    /** This method is used to get a list of Webhook.
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     */
    async getWebhooks(guildID, channelID) {
        const query = new URLSearchParams();
        if (channelID) {
            query.set("channelId", channelID.toString());
        }
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_WEBHOOKS(guildID),
            query
        }).then(data => data.webhooks.map(d => new Webhook_1.Webhook(d, this.#manager.client)));
    }
    /** This method is used to get a specific guild member.
     * @param guildID The ID of the Guild.
     * @param memberID The ID of the Guild Member to get.
     */
    async getMember(guildID, memberID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_MEMBER(guildID, memberID)
        }).then(data => this.#manager.client.util.updateMember(guildID, memberID, data.member));
    }
    /** This method is used to get a list of guild member.
     * @param guildID ID of the guild to get members.
     */
    async getMembers(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_MEMBERS(guildID)
        }).then(data => data.members.map(d => this.#manager.client.util.updateMember(guildID, d.user.id, d)));
    }
    /** Get a ban.
     * @param guildID ID of the guild.
     * @param memberID ID of the banned member.
     */
    async getBan(guildID, memberID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_BAN(guildID, memberID)
        }).then(data => new BannedMember_1.BannedMember(guildID, data.serverMemberBan, this.#manager.client));
    }
    /** This method is used to get a list of guild ban.
     * @param guildID ID of the guild.
     */
    async getBans(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_BANS(guildID)
        }).then(data => data.serverMemberBans.map(d => new BannedMember_1.BannedMember(guildID, d, this.#manager.client)));
    }
    /** Add a member to a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    async memberAddGroup(groupID, memberID) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.GUILD_GROUP_MEMBER(groupID, memberID)
        });
    }
    /** Remove a member from a group
     * @param groupID ID of a guild group.
     * @param memberID ID of a member.
     */
    async memberRemoveGroup(groupID, memberID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_GROUP_MEMBER(groupID, memberID)
        });
    }
    /** Add a role to a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    async memberAddRole(guildID, memberID, roleID) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID)
        });
    }
    /** Remove a role from a member
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param roleID ID of a role.
     */
    async memberRemoveRole(guildID, memberID, roleID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_MEMBER_ROLE(guildID, memberID, roleID)
        });
    }
    /** Edit a member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the the member to edit.
     * @param options Edit options.
     */
    async editMember(guildID, memberID, options) {
        if (options.nickname) {
            return this.#manager.authRequest({
                method: "PUT",
                path: endpoints.MEMBER_NICKNAME(guildID, memberID),
                json: {
                    nickname: options.nickname
                }
            });
        }
        else if (!options.nickname) {
            return this.#manager.authRequest({
                method: "DELETE",
                path: endpoints.MEMBER_NICKNAME(guildID, memberID)
            });
        }
    }
    /** Remove a member from a guild.
     * @param guildID The ID of the guild the member is in.
     * @param memberID The ID of the member to kick.
     */
    async removeMember(guildID, memberID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_MEMBER(guildID, memberID)
        });
    }
    /** Ban a guild member.
     * @param guildID ID of the guild the member is in.
     * @param memberID ID of the member to ban.
     * @param reason The reason of the ban.
     */
    async createBan(guildID, memberID, reason) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_BAN(guildID, memberID),
            json: { reason }
        }).then(data => new BannedMember_1.BannedMember(guildID, data.serverMemberBan, this.#manager.client));
    }
    /** Unban a guild member.
     * @param guildID ID of the guild the member was in.
     * @param memberID ID of the member to unban.
     */
    async removeBan(guildID, memberID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_BAN(guildID, memberID)
        });
    }
    /** Create a webhook
     * @param guildID ID of a guild.
     * @param channelID ID of a channel.
     * @param name Name of the new webhook.
     */
    async createWebhook(guildID, channelID, name) {
        if (!guildID)
            throw new Error("You need to insert the guild id, guildID is not defined.");
        if (!channelID)
            throw new Error("You need to insert a webhook name.");
        if (!channelID)
            throw new Error("You need to insert a channelID.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_WEBHOOKS(guildID),
            json: { name, channelId: channelID }
        }).then(data => new Webhook_1.Webhook(data.webhook, this.#manager.client));
    }
    /** Update a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     * @param options Edit options.
     */
    async editWebhook(guildID, webhookID, options) {
        if (typeof options !== "object")
            throw new Error("webhook options must be an object.");
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.GUILD_WEBHOOK(guildID, webhookID),
            json: options
        }).then(data => new Webhook_1.Webhook(data.webhook, this.#manager.client));
    }
    /** Delete a webhook
     * @param guildID ID of a guild.
     * @param webhookID ID of an existent webhook.
     */
    async deleteWebhook(guildID, webhookID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_WEBHOOK(guildID, webhookID)
        });
    }
    /** Award a member using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Amount of experience.
     */
    async awardMember(guildID, memberID, amount) {
        if (typeof amount !== "number")
            throw new TypeError("amount must be an integer/number.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_MEMBER_XP(guildID, memberID),
            json: { amount }
        }).then(data => Number(data.total));
    }
    /** Set a member's xp using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param memberID ID of a member.
     * @param amount Total amount of experience.
     */
    async setMemberXP(guildID, memberID, amount) {
        if (typeof amount !== "number")
            throw new TypeError("amount must be an integer/number.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_MEMBER_XP(guildID, memberID),
            json: { total: amount }
        }).then(data => Number(data.total));
    }
    /** Award every members of a guild having a role using the built-in EXP system.
     * @param guildID ID of a guild.
     * @param roleID ID of a role.
     * @param amount Amount of experience.
     */
    async awardRole(guildID, roleID, amount) {
        if (typeof amount !== "number")
            throw new TypeError("amount must be an integer/number.");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_MEMBER_ROLE_XP(guildID, roleID),
            json: { amount }
        });
    }
    /** Create a channel in a specified guild.
     * @param guildID ID of a guild.
     * @param name Name of the new channel.
     * @param type Type of the new channel. (e.g: chat)
     * @param options New channel's additional options.
     */
    async createChannel(guildID, name, type, options) {
        if (!guildID)
            throw new Error("guildID is a required parameter.");
        if (!name)
            throw new Error("name parameter is a required parameter.");
        if (!type)
            type = "chat";
        if (options?.categoryID && options?.groupID)
            throw new Error("Only one channel location is needed, two are defined at the same time. [categoryID, groupID]");
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.CHANNELS(),
            json: {
                name,
                topic: options?.description,
                isPublic: options?.isPublic,
                type,
                serverId: guildID,
                groupId: options?.groupID,
                categoryId: options?.categoryID
            }
        }).then(data => Channel_1.Channel.from(data.channel, this.#manager.client));
    }
    /** Edit a channel.
     * @param channelID ID of the channel to edit.
     * @param options Channel edit options.
     */
    async editChannel(channelID, options) {
        if (!channelID)
            throw new Error("channelID is a required parameter.");
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.CHANNEL(channelID),
            json: {
                name: options.name,
                topic: options.description,
                isPublic: options.isPublic
            }
        }).then(data => Channel_1.Channel.from(data.channel, this.#manager.client));
    }
    /** Delete a channel.
     * @param channelID ID of the channel to delete.
     */
    async deleteChannel(channelID) {
        if (!channelID)
            throw new Error("channelID is a required parameter.");
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.CHANNEL(channelID)
        });
    }
    /**
     * Get every guild roles from a guild.
     * @param guildID ID of the guild where roles are.
     */
    async getRoles(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_ROLES(guildID)
        }).then(data => data.roles.map(role => this.#manager.client.util.updateRole(role)));
    }
    /**
     * Get a guild role.
     * @param guildID ID of the guild where the role is.
     * @param roleID ID of the role to get.
     */
    async getRole(guildID, roleID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_ROLE(guildID, roleID)
        }).then(data => this.#manager.client.util.updateRole(data.role));
    }
    /**
     * Create a guild role.
     * @param guildID ID of the server you want to create the role in.
     * @param options Create options
     */
    async createRole(guildID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_ROLES(guildID),
            json: options
        }).then(data => this.#manager.client.util.updateRole(data.role));
    }
    /**
     * Edit a guild role.
     * @param guildID ID of the server
     * @param roleID ID of the role to edit
     * @param options Edit options
     */
    async editRole(guildID, roleID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_ROLE(guildID, roleID),
            json: options
        }).then(data => this.#manager.client.util.updateRole(data.role));
    }
    /**
     * Delete a guild role.
     * @param guildID ID of the guild where the role to delete is in
     * @param roleID ID of the role to delete
     */
    async deleteRole(guildID, roleID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_ROLE(guildID, roleID)
        });
    }
    /**
     * Get guild groups.
     * @param guildID ID of the guild.
     */
    async getGroups(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_GROUPS(guildID)
        }).then(data => data.groups.map(group => this.#manager.client.util.updateGuildGroup(group)));
    }
    /**
     * Get a guild group.
     * @param guildID ID of the guild.
     * @param groupID ID of the group to get.
     */
    async getGroup(guildID, groupID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_GROUP(guildID, groupID)
        }).then(data => this.#manager.client.util.updateGuildGroup(data.group));
    }
    /**
     * Create a guild group.
     * @param guildID The ID of the guild to create a group in.
     * @param options Create options
     */
    async createGroup(guildID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_GROUPS(guildID),
            json: options
        }).then(data => this.#manager.client.util.updateGuildGroup(data.group));
    }
    /**
     * Edit a guild group.
     * @param guildID The ID of the guild where the group to edit is in
     * @param groupID The ID of the group to edit.
     * @param options Edit options
     */
    async editGroup(guildID, groupID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_GROUP(guildID, groupID),
            json: options
        }).then(data => this.#manager.client.util.updateGuildGroup(data.group));
    }
    /**
     * Delete a guild group
     * @param guildID ID of the guild where the group is in.
     * @param groupID ID of the group to delete.
     */
    async deleteGroup(guildID, groupID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_GROUP(guildID, groupID)
        });
    }
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     */
    async getSubscriptions(guildID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_SUBSCRIPTIONS(guildID)
        }).then(data => data.serverSubscriptionTiers.map(tiers => this.#manager.client.util.updateGuildSubscription(tiers)));
    }
    /**
     * Get guild subscriptions.
     * @param guildID ID of the guild.
     * @param subscriptionID ID of the subscription to get.
     */
    async getSubscription(guildID, subscriptionID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_SUBSCRIPTION(guildID, subscriptionID)
        }).then(data => this.#manager.client.util.updateGuildSubscription(data.serverSubscriptionTier));
    }
    /**
     * Get guild member permissions.
     * @param guildID ID of the guild.
     * @param memberID ID of the member.
     */
    async getMemberPermission(guildID, memberID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_MEMBER_PERMISSION(guildID, memberID)
        }).then(data => data.permissions);
    }
    /**
     * Edit role permission.
     * @param guildID ID of the guild.
     * @param roleID ID of the role.
     * @param options Permission to edit.
     */
    async editRolePermission(guildID, roleID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_ROLE_UPDATE_PERMISSION(guildID, roleID),
            json: options
        }).then(data => this.#manager.client.util.updateRole(data.role));
    }
    /**
     * Bulk Award XP Members
     * @param guildID ID of the guild
     * @param options Members to award XP
     */
    async bulkAwardXP(guildID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_MEMBER_BULK_XP(guildID),
            json: options
        }).then(data => data);
    }
    /**
     * Bulk set XP Members
     * @param guildID ID of the guild
     * @param options Members to set XP
     */
    async bulkSetXP(guildID, options) {
        return this.#manager.authRequest({
            method: "PUT",
            path: endpoints.GUILD_MEMBER_BULK_XP(guildID),
            json: options
        }).then(data => data);
    }
    /**
     * Create a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param options Options to create a category.
     */
    async createCategory(guildID, options) {
        return this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_CATEGORY_CREATE(guildID),
            json: options
        }).then(data => this.#manager.client.util.updateGuildCategory(data.category));
    }
    /**
     * Read a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    async getCategory(guildID, categoryID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CATEGORY(guildID, categoryID)
        }).then(data => this.#manager.client.util.updateGuildCategory(data.category));
    }
    /**
     * Edit a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    async editCategory(guildID, categoryID, options) {
        return this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_CATEGORY(guildID, categoryID),
            json: options
        }).then(data => this.#manager.client.util.updateGuildCategory(data.category));
    }
    /**
     * Delete a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    async deleteCategory(guildID, categoryID) {
        return this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_CATEGORY(guildID, categoryID)
        }).then(data => this.#manager.client.util.updateGuildCategory(data.category));
    }
    /**
     * Create a channel category permission assigned to a user or role.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to
     * @param options Permission options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async createCategoryPermission(guildID, categoryID, targetID, options) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "POST",
            path: endpoints.GUILD_CATEGORY_USER_PERMISSION(guildID, categoryID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelCategoryUserPermission)) :
            this.#manager.authRequest({
                method: "POST",
                path: endpoints.GUILD_CATEGORY_ROLE_PERMISSION(guildID, categoryID, targetID),
                json: options
            }).then(data => new Permission_1.Permission(data.channelCategoryRolePermission));
    }
    /**
     * Update a category permission.
     * @param guildID ID of the server the category is in
     * @param categoryID ID of the category
     * @param targetID ID of the user (string) or role (number) to assign the permission to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async editCategoryPermission(guildID, categoryID, targetID, options) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "PATCH",
            path: endpoints.GUILD_CATEGORY_USER_PERMISSION(guildID, categoryID, targetID),
            json: options
        }).then(data => new Permission_1.Permission(data.channelCategoryUserPermission)) :
            this.#manager.authRequest({
                method: "PATCH",
                path: endpoints.GUILD_CATEGORY_ROLE_PERMISSION(guildID, categoryID, targetID),
                json: options
            }).then(data => new Permission_1.Permission(data.channelCategoryRolePermission));
    }
    /**
     * Get permission coming from a category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permission is in
     * @param targetID ID of the user (string) or role (number) to get the permission for
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async getCategoryPermission(guildID, categoryID, targetID) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CATEGORY_USER_PERMISSION(guildID, categoryID, targetID)
        }).then(data => new Permission_1.Permission(data.channelCategoryUserPermission)) :
            this.#manager.authRequest({
                method: "GET",
                path: endpoints.GUILD_CATEGORY_ROLE_PERMISSION(guildID, categoryID, targetID)
            }).then(data => new Permission_1.Permission(data.channelCategoryRolePermission));
    }
    /**
     * Get permissions of a category.
     * @param guildID ID of the server the category is in.
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryPermissions(guildID, categoryID) {
        const userPromise = this.getCategoryUserPermissions(guildID, categoryID);
        const rolePromise = this.getCategoryRolePermissions(guildID, categoryID);
        return Promise.all([userPromise, rolePromise])
            .then(([userPermissions, rolePermissions]) => userPermissions.concat(rolePermissions))
            .catch(err => {
            throw err;
        });
    }
    /**
     * Get user permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryUserPermissions(guildID, categoryID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CATEGORY_USER_PERMISSIONS(guildID, categoryID)
        }).then(data => data.channelCategoryUserPermissions.map(d => new Permission_1.Permission(d)));
    }
    /**
     * Get role permissions from a specified category.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category the permissions are in
     */
    async getCategoryRolePermissions(guildID, categoryID) {
        return this.#manager.authRequest({
            method: "GET",
            path: endpoints.GUILD_CATEGORY_ROLE_PERMISSIONS(guildID, categoryID)
        }).then(data => data.channelCategoryRolePermissions.map(d => new Permission_1.Permission(d)));
    }
    /**
     * Delete a category permission.
     * @param guildID ID of the guild where the channel is in
     * @param categoryID ID of the category
     * @param targetID ID of the user or role to delete the permission from
     */
    async deleteCategoryPermission(guildID, categoryID, targetID) {
        return typeof targetID === "string" ? this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_CATEGORY_USER_PERMISSION(guildID, categoryID, targetID)
        }) : this.#manager.authRequest({
            method: "DELETE",
            path: endpoints.GUILD_CATEGORY_ROLE_PERMISSION(guildID, categoryID, targetID)
        });
    }
}
exports.Guilds = Guilds;
//# sourceMappingURL=data:application/json;base64,