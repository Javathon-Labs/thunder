"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnouncementHandler = void 0;
/** @module AnnouncementHandler */
const GatewayEventHandler_1 = require("./GatewayEventHandler");
const Announcement_1 = require("../../structures/Announcement");
const AnnouncementComment_1 = require("../../structures/AnnouncementComment");
const AnnouncementReactionInfo_1 = require("../../structures/AnnouncementReactionInfo");
/** Internal component, emitting announcement events. */
class AnnouncementHandler extends GatewayEventHandler_1.GatewayEventHandler {
    async announcementCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcement.channelId);
        else
            void this.addGuildChannel(data.serverId, data.announcement.channelId);
        const channel = this.client.getChannel(data.serverId, data.announcement.channelId);
        const AnnouncementComponent = channel?.announcements?.update(data.announcement) ?? new Announcement_1.Announcement(data.announcement, this.client);
        this.client.emit("announcementCreate", AnnouncementComponent);
    }
    async announcementUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcement.channelId);
        else
            void this.addGuildChannel(data.serverId, data.announcement.channelId);
        const channel = this.client.getChannel(data.serverId, data.announcement.channelId);
        const CachedAnnouncement = channel?.announcements.get(data.announcement.id)?.toJSON() ?? null;
        const AnnouncementComponent = channel?.announcements?.update(data.announcement) ?? new Announcement_1.Announcement(data.announcement, this.client);
        this.client.emit("announcementUpdate", AnnouncementComponent, CachedAnnouncement);
    }
    async announcementDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcement.channelId);
        else
            void this.addGuildChannel(data.serverId, data.announcement.channelId);
        const channel = this.client.getChannel(data.serverId, data.announcement.channelId);
        const AnnouncementComponent = channel?.announcements?.update(data.announcement) ?? new Announcement_1.Announcement(data.announcement, this.client);
        channel?.announcements.delete(data.announcement.id);
        this.client.emit("announcementDelete", AnnouncementComponent);
    }
    async announcementCommentCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        else
            void this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        const channel = this.client.getChannel(data.serverId, data.announcementComment.channelId);
        const comment = channel?.announcements.get(data.announcementComment.announcementId)?.comments.update(data.announcementComment) ?? new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.client, { guildID: data.serverId });
        this.client.emit("announcementCommentCreate", comment);
    }
    async announcementCommentUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        else
            void this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        const channel = this.client.getChannel(data.serverId, data.announcementComment.channelId);
        const cachedComment = channel?.announcements.get(data.announcementComment.announcementId)?.comments.get(data.announcementComment.id)?.toJSON() ?? null;
        const comment = channel?.announcements.get(data.announcementComment.announcementId)?.comments.update(data.announcementComment) ?? new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.client, { guildID: data.serverId });
        this.client.emit("announcementCommentUpdate", comment, cachedComment);
    }
    async announcementCommentDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        else
            void this.addGuildChannel(data.serverId, data.announcementComment.channelId, data.announcementComment.announcementId);
        const channel = this.client.getChannel(data.serverId, data.announcementComment.channelId);
        const comment = channel?.announcements.get(data.announcementComment.announcementId)?.comments.update(data.announcementComment) ?? new AnnouncementComment_1.AnnouncementComment(data.announcementComment, this.client, { guildID: data.serverId });
        this.client.emit("announcementCommentDelete", comment);
    }
    async announcementReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
        const ReactionInfo = new AnnouncementReactionInfo_1.AnnouncementReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async announcementReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
        const ReactionInfo = new AnnouncementReactionInfo_1.AnnouncementReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async announcementCommentReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
        const ReactionInfo = new AnnouncementReactionInfo_1.AnnouncementReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async announcementCommentReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId, data.reaction.announcementId);
        const ReactionInfo = new AnnouncementReactionInfo_1.AnnouncementReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async addGuildChannel(guildID, channelID, announcementID) {
        const guild = this.client.guilds.get(guildID);
        if (this.client.getChannel(guildID, channelID) === undefined) {
            const channel = await this.client.rest.channels.getChannel(channelID).catch(err => this.client.emit("warn", `Cannot register channel to cache due to: (${String(err)})`));
            if (typeof channel !== "boolean")
                guild?.channels.add(channel);
        }
        const conditions = this.client.getChannel(guildID, channelID) !== undefined && this.client.getChannel(guildID, channelID)?.announcements.get(announcementID) === undefined;
        if (guildID && channelID && announcementID && conditions) {
            const restAnnouncement = await this.client.rest.channels.getAnnouncement(channelID, announcementID).catch(err => this.client.emit("warn", `Cannot register doc to cache due to: (${String(err)})`));
            const channel = guild?.channels.get(channelID);
            if (typeof restAnnouncement !== "boolean")
                channel?.announcements.add(restAnnouncement);
        }
    }
}
exports.AnnouncementHandler = AnnouncementHandler;
//# sourceMappingURL=data:application/json;base64,