/** @module Member */
import { Client } from "./Client";
import { User } from "./User";
import { Guild } from "./Guild";
import { BannedMember } from "./BannedMember";
import { SocialLink } from "./SocialLink";
import { APIGuildMember, Permissions } from "../Constants";
import { EditMemberOptions } from "../types/guilds";
import { JSONMember } from "../types/json";
/** Represents a guild user. */
export declare class Member extends User {
    /** When this member joined the guild. */
    joinedAt: Date | null;
    /** Array of member's roles. */
    roles: Array<number>;
    /** Member's server nickname. */
    nickname: string | null;
    /** Tells you if the member is the server owner. */
    isOwner: boolean;
    /** Server ID. */
    guildID: string;
    private _data;
    /**
     * @param data raw data.
     * @param client client.
     * @param guildID ID of the guild.
     */
    constructor(data: APIGuildMember, client: Client, guildID: string);
    toJSON(): JSONMember;
    protected update(data: APIGuildMember): void;
    /** Guild where the user comes from, returns Guild or a promise.
     * If guild isn't cached & the request failed, this will return you undefined.
     */
    get guild(): Guild | Promise<Guild>;
    /** Member's user, shows less information. */
    get user(): User;
    /** Edit this member.
     * @param options Edit options.
     */
    edit(options: EditMemberOptions): Promise<void>;
    /** Kick this member. */
    kick(): Promise<void>;
    /** Ban this member.
     * @param reason The reason of the ban.
     */
    ban(reason?: string): Promise<BannedMember>;
    /** Unban this member. */
    unban(): Promise<void>;
    /** Get a specified social link from the member, if member is connected to them through Guilded.
     * @param socialMediaName Name of a social media linked to this member.
     */
    getSocialLink(socialMediaName: string): Promise<SocialLink>;
    /** Add this member to a guild group.
     * @param groupID ID of the guild group.
     */
    addGroup(groupID: string): Promise<void>;
    /** Remove this member from a guild group.
     * @param groupID ID of the guild group.
     */
    removeGroup(groupID: string): Promise<void>;
    /** Add a role to this member.
     * @param roleID ID of the role to be added.
     */
    addRole(roleID: number): Promise<void>;
    /** Remove a role from this member.
     * @param roleID ID of the role to be added.
     */
    removeRole(roleID: number): Promise<void>;
    /** Award the member using the built-in EXP system.
     * @param amount Amount of experience to give.
     */
    award(amount: number): Promise<number>;
    /** Set member's experience using the built-in EXP system.
     * @param amount Amount of experience to set.
     */
    setXP(amount: number): Promise<number>;
    /** Get member permission */
    getPermission(): Promise<Array<Permissions>>;
}
