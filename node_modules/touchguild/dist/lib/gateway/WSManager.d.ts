import { Client } from "../structures/Client";
import TypedEmitter from "../types/TypedEmitter";
import { WebsocketEvents } from "../types/events";
import WebSocket from "ws";
/** Websocket manager, used to receive ws events. */
export declare class WSManager extends TypedEmitter<WebsocketEvents> {
    #private;
    ws: WebSocket | null;
    token: string;
    client: Client;
    params: WSManagerParams;
    apiversion: string | number;
    proxyURL: string;
    reconnect?: boolean;
    reconnectAttemptLimit?: number;
    replayMissedEvents?: boolean;
    lastMessageID?: string;
    firstwsMessage: boolean;
    currReconnectAttempt: number;
    reconnectInterval: number;
    alive?: boolean;
    lastHeartbeatSent: number;
    lastHeartbeatReceived: number;
    lastHeartbeatAck: boolean;
    latency: number;
    heartbeatRequested: boolean;
    connected: boolean;
    connectionTimeout: number;
    compression: boolean;
    constructor(client: Client, params: WSManagerParams);
    get vAPI(): number;
    _debug(message: string | object): boolean;
    get replayEventsCondition(): boolean;
    connect(): void | Error;
    private initialize;
    private onSocketMessage;
    private onPacket;
    private onSocketOpen;
    private onSocketError;
    private onSocketClose;
    private onSocketPing;
    private onSocketPong;
    private heartbeat;
    disconnect(reconnect?: boolean | undefined, error?: Error): void;
    reset(): void;
    hardReset(): void;
}
export interface WSManagerParams {
    /** Bot's token */
    token: string;
    /** Guilded API URL */
    proxyURL?: string;
    /** Guilded API Version */
    apiversion?: number | 1;
    /** Automatically re-establish connection on error */
    reconnect?: boolean;
    /** Reconnect limit */
    reconnectAttemptLimit?: number;
    /** Replay missed events on connection interruption */
    replayMissedEvents?: boolean;
    /** Client. */
    client: Client;
    /** Compression */
    compression?: boolean;
}
