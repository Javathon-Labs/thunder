/** @module DocComment */
import { Client } from "./Client";
import { Base } from "./Base";
import { Member } from "./Member";
import { APIDocComment, APIMentions } from "../Constants";
import { JSONDocComment } from "../types/json";
import { ConstructorDocCommentOptions, CreateDocCommentOptions, EditDocCommentOptions } from "../types/docComment";
/** DocComment represents a doc comment coming from a Docs channel. */
export declare class DocComment extends Base<number> {
    /** Raw data */
    raw: APIDocComment;
    /** The content of the comment. */
    content: string;
    /** The date of the comment's creation. */
    createdAt: Date;
    /** ID of the member who created this comment. */
    memberID: string;
    /** The date when the comment was last updated. */
    updatedAt: Date | null;
    /** ID of the channel the comment is in. */
    channelID: string;
    /** The ID of the doc the comment is in. */
    docID: number;
    /** Mentions. */
    mentions: APIMentions | null;
    /** ID of the guild, if provided. */
    guildID: string | null;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APIDocComment, client: Client, options?: ConstructorDocCommentOptions);
    toJSON(): JSONDocComment;
    protected update(data: APIDocComment): void;
    /** Retrieve the member who sent this comment, if cached.
     * If there is no cached member, this will make a rest request which returns a Promise.
     * If the request fails, it'll return undefined or throw an error that you can catch.
     */
    get member(): Member | Promise<Member> | undefined;
    /** Create a comment in the same doc as this one.
     * @param options Create options.
     */
    createDocComment(options: CreateDocCommentOptions): Promise<DocComment>;
    /** Add a reaction to this comment.
     * @param reaction ID of the reaction to add.
     */
    createReaction(reaction: number): Promise<void>;
    /** Remove a reaction from this comment.
     * @param reaction ID of the reaction to remove.
     */
    deleteReaction(reaction: number): Promise<void>;
    /** Edit this comment */
    edit(options: EditDocCommentOptions): Promise<DocComment>;
    /** Delete this comment */
    delete(): Promise<void>;
}
