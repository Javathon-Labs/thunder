"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarHandler = void 0;
/** @module CalendarHandler */
const GatewayEventHandler_1 = require("./GatewayEventHandler");
const CalendarEvent_1 = require("../../structures/CalendarEvent");
const CalendarRSVP_1 = require("../../structures/CalendarRSVP");
const CalendarReactionInfo_1 = require("../../structures/CalendarReactionInfo");
const CalendarEventComment_1 = require("../../structures/CalendarEventComment");
/** Internal component, emitting calendar events. */
class CalendarHandler extends GatewayEventHandler_1.GatewayEventHandler {
    async calendarEventCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        else
            void this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        const channel = this.client.getChannel(data.serverId, data.calendarEvent.channelId);
        const CalendarEventComponent = channel?.scheduledEvents.update(data.calendarEvent) ?? new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.client);
        this.client.emit("calendarEventCreate", CalendarEventComponent);
    }
    async calendarEventUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        else
            void this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        const channel = this.client.getChannel(data.serverId, data.calendarEvent.channelId);
        const CachedEvent = channel?.scheduledEvents.get(data.calendarEvent.id)?.toJSON() ?? null;
        const CalendarEventComponent = channel?.scheduledEvents.update(data.calendarEvent) ?? new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.client);
        this.client.emit("calendarEventUpdate", CalendarEventComponent, CachedEvent);
    }
    async calendarEventDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        else
            void this.addGuildChannel(data.serverId, data.calendarEvent.channelId);
        const channel = this.client.getChannel(data.serverId, data.calendarEvent.channelId);
        const CalendarEventComponent = channel?.scheduledEvents.update(data.calendarEvent) ?? new CalendarEvent_1.CalendarEvent(data.calendarEvent, this.client);
        channel?.scheduledEvents.delete(data.calendarEvent.id);
        this.client.emit("calendarEventDelete", CalendarEventComponent);
    }
    async calendarEventReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new CalendarReactionInfo_1.CalendarReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async calendarEventReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new CalendarReactionInfo_1.CalendarReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async calendarCommentCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        else
            void this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        const channel = this.client.getChannel(data.serverId, data.calendarEventComment.channelId);
        const CalendarEventComponent = channel?.scheduledEvents.get(Number(data.calendarEventComment.calendarEventId));
        const CalendarComment = CalendarEventComponent?.comments.update(data.calendarEventComment) ?? new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.client, { guildID: data.serverId });
        this.client.emit("calendarCommentCreate", CalendarComment);
    }
    async calendarCommentUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        else
            void this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        const channel = this.client.getChannel(data.serverId, data.calendarEventComment.channelId);
        const CalendarEventComponent = channel?.scheduledEvents.get(Number(data.calendarEventComment.calendarEventId));
        const CachedComment = CalendarEventComponent?.comments.get(data.calendarEventComment.id)?.toJSON() ?? null;
        const CalendarComment = CalendarEventComponent?.comments.update(data.calendarEventComment) ?? new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.client, { guildID: data.serverId });
        this.client.emit("calendarCommentUpdate", CalendarComment, CachedComment);
    }
    async calendarCommentDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        else
            void this.addGuildChannel(data.serverId, data.calendarEventComment.channelId, Number(data.calendarEventComment.calendarEventId));
        const channel = this.client.getChannel(data.serverId, data.calendarEventComment.channelId);
        const CalendarEventComponent = channel?.scheduledEvents.get(Number(data.calendarEventComment.calendarEventId));
        const CalendarComment = CalendarEventComponent?.comments.update(data.calendarEventComment) ?? new CalendarEventComment_1.CalendarEventComment(data.calendarEventComment, this.client, { guildID: data.serverId });
        CalendarEventComponent?.comments.delete(data.calendarEventComment.id);
        this.client.emit("calendarCommentDelete", CalendarComment);
    }
    async calendarCommentReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new CalendarReactionInfo_1.CalendarReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async calendarCommentReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new CalendarReactionInfo_1.CalendarReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async calendarRsvpUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId, data.calendarEventRsvp.calendarEventId);
        else
            void this.addGuildChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId, data.calendarEventRsvp.calendarEventId);
        const channel = this.client.getChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId);
        const CachedRSVP = channel?.scheduledEvents.get(data.calendarEventRsvp.calendarEventId)?.rsvps.get(data.calendarEventRsvp.calendarEventId)?.toJSON() ?? null;
        const updateFromCache = channel?.scheduledEvents.get(data.calendarEventRsvp.calendarEventId)?.rsvps.update(data.calendarEventRsvp);
        const CalendarERSVPComponent = updateFromCache ?? new CalendarRSVP_1.CalendarEventRSVP(data.calendarEventRsvp, this.client);
        this.client.emit("calendarEventRsvpUpdate", CalendarERSVPComponent, CachedRSVP);
    }
    async calendarRsvpBulkUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.calendarEventRsvps[0].serverId, data.calendarEventRsvps[0].channelId, data.calendarEventRsvps[0].calendarEventId);
        else
            void this.addGuildChannel(data.calendarEventRsvps[0].serverId, data.calendarEventRsvps[0].channelId, data.calendarEventRsvps[0].calendarEventId);
        const channel = this.client.getChannel(data.calendarEventRsvps[0].serverId, data.calendarEventRsvps[0].channelId);
        const CachedRSVPS = data.calendarEventRsvps.map(rsvp => channel?.scheduledEvents.get(rsvp.calendarEventId)?.rsvps.get(rsvp.calendarEventId)?.toJSON() ?? null);
        const updateFromCache = data.calendarEventRsvps.map(rsvp => channel?.scheduledEvents.get(rsvp.calendarEventId)?.rsvps.update(rsvp) ?? new CalendarRSVP_1.CalendarEventRSVP(rsvp, this.client));
        const CalendarRSVPMap = updateFromCache ?? data.calendarEventRsvps.map(rsvp => new CalendarRSVP_1.CalendarEventRSVP(rsvp, this.client));
        this.client.emit("calendarEventRsvpBulkUpdate", CalendarRSVPMap, CachedRSVPS);
    }
    async calendarRsvpDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId, data.calendarEventRsvp.calendarEventId);
        else
            void this.addGuildChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId, data.calendarEventRsvp.calendarEventId);
        const channel = this.client.getChannel(data.calendarEventRsvp.serverId, data.calendarEventRsvp.channelId);
        const updateFromCache = channel?.scheduledEvents.get(data.calendarEventRsvp.calendarEventId)?.rsvps.update(data.calendarEventRsvp);
        const CalendarERSVPComponent = updateFromCache ?? new CalendarRSVP_1.CalendarEventRSVP(data.calendarEventRsvp, this.client);
        this.client.emit("calendarEventRsvpDelete", CalendarERSVPComponent);
    }
    async calendarRsvpManyUpdated() {
        return; // TouchGuild doesn't support many updated.
    }
    async addGuildChannel(guildID, channelID, eventID) {
        const guild = this.client.guilds.get(guildID);
        if (this.client.getChannel(guildID, channelID) === undefined) {
            const channel = await this.client.rest.channels.getChannel(channelID).catch(err => this.client.emit("warn", `Cannot register channel to cache due to: (${String(err)})`));
            if (typeof channel !== "boolean")
                guild?.channels?.add(channel);
        }
        const conditions = this.client.getChannel(guildID, channelID) !== undefined && this.client.getChannel(guildID, channelID)?.scheduledEvents.get(eventID) === undefined;
        if (guildID && channelID && eventID && conditions) {
            const restEvent = await this.client.rest.channels.getCalendarEvent(channelID, eventID).catch(err => this.client.emit("warn", `Cannot register event to cache due to: (${String(err)})`));
            if (typeof restEvent !== "boolean")
                guild?.channels.get(channelID)?.scheduledEvents.add(restEvent);
        }
    }
}
exports.CalendarHandler = CalendarHandler;
//# sourceMappingURL=data:application/json;base64,