/** @module GuildCategory */
import { Client } from "./Client";
import { Base } from "./Base";
import { Permission } from "./Permission";
import { JSONGuildCategory } from "../types/json";
import { PATCHUpdateCategoryBody } from "../Constants";
import { APIGuildCategory, PATCHChannelCategoryUserPermissionBody, POSTChannelCategoryUserPermissionBody } from "guildedapi-types.ts/v1";
/** Class representing a guild group. */
export declare class GuildCategory extends Base<number> {
    /** Type of the subscription */
    id: number;
    /** The ID of the server */
    guildID: string;
    /** The ID of the group */
    groupID: string;
    /** Date of the creation of the category.  */
    createdAt: Date;
    /** The date of the last edition of the category. */
    updatedAt: Date | null;
    /** Name of the category (min length 1; max length 100) */
    name: string;
    constructor(data: APIGuildCategory, client: Client);
    toJSON(): JSONGuildCategory;
    protected update(data: APIGuildCategory): void;
    /**
     * Update a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    editCategory(options: PATCHUpdateCategoryBody): Promise<GuildCategory>;
    /**
     * Delete a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    deleteCategory(): Promise<GuildCategory>;
    /**
     * Create a channel category permission assigned to a user or role.
     * @param targetID ID of the user (string) or role (number) to assign the permission to
     * @param options Permission options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    createPermission(targetID: string | number, options: POSTChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Update a category permission.
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    editPermission(targetID: string | number, options: PATCHChannelCategoryUserPermissionBody): Promise<Permission>;
    /**
     * Get permission coming from a category.
     * @param targetID ID of the user (string) or role (number) to get the permission for
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    getPermission(targetID: string | number): Promise<Permission>;
    /**
     * Get permissions of a category.
     */
    getPermissions(): Promise<Array<Permission>>;
    /**
     * Get user permissions from a specified category.
     */
    getUserPermissions(): Promise<Array<Permission>>;
    /**
     * Get role permissions from a specified category.
     */
    getRolePermissions(): Promise<Array<Permission>>;
    /**
     * Delete a category permission.
     * @param targetID ID of the user or role to delete the permission from
     */
    deletePermission(targetID: string | number): Promise<void>;
}
