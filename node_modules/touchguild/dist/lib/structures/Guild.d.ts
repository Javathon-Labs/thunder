/** @module Guild */
import { Client } from "./Client";
import { Base } from "./Base";
import { Channel } from "./Channel";
import { Member } from "./Member";
import { User } from "./User";
import { BannedMember } from "./BannedMember";
import { GuildSubscription } from "./GuildSubscription";
import { GuildGroup } from "./GuildGroup";
import { GuildRole } from "./GuildRole";
import { GuildCategory } from "./GuildCategory";
import { APIGuild, APIGuildChannel, APIGuildGroup, APIGuildMember, APIGuildRole, POSTBulkAwardXPBody, POSTBulkAwardXPResponse, POSTCreateCategoryBody, PATCHUpdateCategoryBody } from "../Constants";
import TypedCollection from "../util/TypedCollection";
import { JSONGuild } from "../types/json";
import { AnyChannel } from "../types/channel";
/** Represents a Guild, also called server. */
export declare class Guild extends Base<string> {
    private _clientMember?;
    /** ID of the guild owner. */
    ownerID: string;
    /** Guild type. */
    type?: string;
    /** The name of the guild. */
    name: string;
    /** The URL of the guild. */
    url?: string;
    /** Guild description. */
    description?: string;
    /** Guild icon URL. */
    iconURL?: string | null;
    /** Guild banner URL. */
    bannerURL?: string | null;
    /** Guild's timezone. */
    timezone?: string;
    /** Default channel of the guild. */
    defaultChannelID?: string;
    /** When this guild was created. */
    createdAt: Date;
    /** If true, the guild is verified. */
    verified: boolean;
    /** Cached guild groups */
    groups: TypedCollection<string, APIGuildGroup, GuildGroup>;
    /** Cached guild channels. */
    channels: TypedCollection<string, APIGuildChannel, AnyChannel>;
    /** Cached guild members. */
    members: TypedCollection<string, APIGuildMember, Member, [guildID: string]>;
    /** Cached guild roles. */
    roles: TypedCollection<number, APIGuildRole, GuildRole>;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APIGuild, client: Client);
    toJSON(): JSONGuild;
    protected update(data: APIGuild): void;
    /** Retrieve cached or rest guild's owner. */
    get owner(): Member | User | Promise<Member>;
    /** Get a channel from this guild, if cached.
     * @param channelID The ID of the channel to get from cache.
     */
    getChannel(channelID: string): Channel | undefined;
    /** Get a member from this guild, if cached.
     * @param memberID The ID of the member to get.
     */
    getMember(memberID: string): Member | undefined;
    /** Ban a member.
     * @param memberID ID of the member to ban.
     * @param reason The reason of the ban.
     */
    createBan(memberID: string, reason?: string): Promise<BannedMember>;
    /** Unban a member.
     * @param memberID ID of the member to unban.
     */
    removeBan(memberID: string): Promise<void>;
    /** Get Subscription
     * @param subscriptionID ID of the subscription to get.
     */
    getSubscription(subscriptionID: string): Promise<GuildSubscription>;
    /** Get Subscriptions */
    getSubscriptions(): Promise<Array<GuildSubscription>>;
    /** Bulk Award XP Members
     * @param options Members to award XP and amount of XP to award.
     */
    bulkAwardXPMembers(options: POSTBulkAwardXPBody): Promise<POSTBulkAwardXPResponse>;
    /** Bulk set XP Members
     * @param options Members to set XP and amount of XP to set.
     */
    bulkSetXPMembers(options: POSTBulkAwardXPBody): Promise<POSTBulkAwardXPResponse>;
    /**
     * Create a category
     * @param guildID ID of the guild.
     * @param options Create options.
     */
    createCategory(options: POSTCreateCategoryBody): Promise<GuildCategory>;
    /**
     * Read a guild category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    getCategory(categoryID: number): Promise<GuildCategory>;
    /**
     * Edit a category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     * @param options Options to update a category.
     */
    editCategory(categoryID: number, options: PATCHUpdateCategoryBody): Promise<GuildCategory>;
    /**
     * Delete a category.
     * @param guildID ID of the guild to create a category in.
     * @param categoryID ID of the category you want to read.
     */
    deleteCategory(categoryID: number): Promise<GuildCategory>;
}
