"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextChannel = void 0;
const tslib_1 = require("tslib");
const Message_1 = require("./Message");
const GuildChannel_1 = require("./GuildChannel");
const TypedCollection_1 = tslib_1.__importDefault(require("../util/TypedCollection"));
/** Represents a guild channel. */
class TextChannel extends GuildChannel_1.GuildChannel {
    /**
     * @param data raw data
     * @param client client
     */
    constructor(data, client) {
        super(data, client);
        this.messages = new TypedCollection_1.default(Message_1.Message, client, client.params.collectionLimits?.messages);
        this.update(data);
    }
    /** Create a message in this channel.
     * @param options Message options.
     */
    async createMessage(options) {
        return this.client.rest.channels.createMessage(this.id, options);
    }
    /** Edit a message from this channel.
     * @param options Message options.
     */
    async editMessage(messageID, options) {
        return this.client.rest.channels.editMessage(this.id, messageID, options);
    }
    /** Delete a message from this channel.
     * @param options Message options.
     */
    async deleteMessage(messageID) {
        return this.client.rest.channels.deleteMessage(this.id, messageID);
    }
    /** Create Channel Role Permissions
     * @param targetID ID of the target object (role or user) to assign the permission to.
     * @param options Create options.
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async createPermission(targetID, options) {
        return this.client.rest.channels.createPermission(this.guildID, this.id, targetID, options);
    }
    /**
     * Edit a channel permission.
     * @param targetID ID of the target object (role or user) the permission is assigned to.
     * @param options Edit options
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async editPermission(targetID, options) {
        return this.client.rest.channels.editPermission(this.guildID, this.id, targetID, options);
    }
    /**
     * Delete an existing permission set on this channel.
     * @param targetID ID of the target object (role or user) the permission is assigned to.
     *
     * Warning: targetID must have the correct type (number=role, string=user).
     */
    async deletePermission(targetID) {
        return this.client.rest.channels.deletePermission(this.guildID, this.id, targetID);
    }
    toJSON() {
        return {
            ...super.toJSON(),
            messages: this.messages.map(message => message.toJSON())
        };
    }
}
exports.TextChannel = TextChannel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dENoYW5uZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvc3RydWN0dXJlcy9UZXh0Q2hhbm5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBR0EsdUNBQW9DO0FBQ3BDLGlEQUE4QztBQVU5QyxzRkFBc0Q7QUFHdEQsa0NBQWtDO0FBQ2xDLE1BQWEsV0FBWSxTQUFRLDJCQUFZO0lBR3pDOzs7T0FHRztJQUNILFlBQVksSUFBcUIsRUFBRSxNQUFjO1FBQzdDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLHlCQUFlLENBQUMsaUJBQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBMEI7UUFDMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFjLElBQUksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxTQUFpQixFQUFFLE9BQTJCO1FBQzVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBYyxJQUFJLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQWlCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUF5QixFQUFFLE9BQXNDO1FBQ3BGLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEcsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBeUIsRUFBRSxPQUF1QztRQUNuRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBeUI7UUFDNUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFUSxNQUFNO1FBQ1gsT0FBTztZQUNILEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNqQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDM0QsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXZFRCxrQ0F1RUMifQ==