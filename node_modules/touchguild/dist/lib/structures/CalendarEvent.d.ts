/** @module CalendarEvent */
import { Client } from "./Client";
import { Member } from "./Member";
import { Base } from "./Base";
import { User } from "./User";
import { CalendarEventRSVP } from "./CalendarRSVP";
import { CalendarEventComment } from "./CalendarEventComment";
import { APICalendarEvent, APICalendarEventComment, APICalendarEventRSVP, APIMentions } from "../Constants";
import { EditCalendarEventOptions } from "../types/calendarEvent";
import TypedCollection from "../util/TypedCollection";
import { JSONCalendarEvent } from "../types/json";
/** CalendarEvent represents an event coming from a calendar channel. */
export declare class CalendarEvent extends Base<number> {
    /** Raw data */
    data: APICalendarEvent;
    /** Guild/server ID */
    guildID: string;
    /** ID of the channel the event was created on. */
    channelID: string;
    /** Name of the event */
    name: string;
    /** Event's description */
    description: string | null;
    /** Event user-specified location */
    location: string | null;
    /** Event user-specified url */
    url: string | null;
    /** Event color in calendar. */
    color: number | null;
    /** Limit of event entry. */
    rsvpLimit: number | null;
    /** Timestamp (unix epoch time) of the event starting time.*/
    startsAt: Date | null;
    /** Duration in *ms* of the event. */
    duration: number;
    /** If true, this event is private. */
    isPrivate: boolean;
    /** Mentions in this calendar event. */
    mentions: APIMentions | null;
    /** When the event was created. */
    createdAt: Date | null;
    /** ID of the owner of this event. */
    ownerID: string;
    /** Details about event cancelation (if canceled) */
    cancelation: APICalendarEvent["cancellation"] | null;
    /** Cached RSVPS. */
    rsvps: TypedCollection<number, APICalendarEventRSVP, CalendarEventRSVP>;
    /** Cached Comments */
    comments: TypedCollection<number, APICalendarEventComment, CalendarEventComment>;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APICalendarEvent, client: Client);
    toJSON(): JSONCalendarEvent;
    protected update(data: APICalendarEvent): void;
    /** Retrieve the event's owner, if cached.
     *
     * Note: this getter can output: Member, User, Promise<Member> or undefined.
     */
    get owner(): Member | User | Promise<Member> | undefined;
    /** Edit this event */
    edit(options: EditCalendarEventOptions): Promise<CalendarEvent>;
    /** Delete this event */
    delete(): Promise<void>;
}
