"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumThreadHandler = void 0;
/** @module ForumThreadHandler */
const GatewayEventHandler_1 = require("./GatewayEventHandler");
const ForumThread_1 = require("../../structures/ForumThread");
const ForumThreadComment_1 = require("../../structures/ForumThreadComment");
const ForumThreadReactionInfo_1 = require("../../structures/ForumThreadReactionInfo");
/** Internal component, emitting forum thread events. */
class ForumThreadHandler extends GatewayEventHandler_1.GatewayEventHandler {
    async forumThreadCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads?.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        channel?.threads?.add(Thread);
        this.client.emit("forumThreadCreate", Thread);
    }
    async forumThreadUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.serverId, data.forumTopic.channelId);
        const CachedThread = channel?.threads.get(data.forumTopic.id)?.toJSON() ?? null;
        const Thread = channel?.threads?.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        this.client.emit("forumThreadUpdate", Thread, CachedThread);
    }
    async forumThreadDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads?.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        channel?.threads?.delete(Thread.id);
        this.client.emit("forumThreadDelete", Thread);
    }
    async forumThreadPin(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        this.client.emit("forumThreadPin", Thread);
    }
    async forumThreadUnpin(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        this.client.emit("forumThreadUnpin", Thread);
    }
    async forumThreadCommentCreate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        const channel = this.client.getChannel(data.serverId, data.forumTopicComment.channelId);
        const cachedTC = channel?.threads.get(data.forumTopicComment.forumTopicId)?.comments.update(data.forumTopicComment);
        const ThreadComment = cachedTC ?? new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.client, { guildID: data.serverId });
        channel?.threads?.get(data.forumTopicComment.forumTopicId)?.comments.add(ThreadComment);
        this.client.emit("forumCommentCreate", ThreadComment);
    }
    async forumThreadCommentUpdate(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        const channel = this.client.getChannel(data.serverId, data.forumTopicComment.channelId);
        const CachedComment = channel?.threads.get(data.forumTopicComment.forumTopicId)?.comments.get(data.forumTopicComment.id)?.toJSON() ?? null;
        const cachedTC = channel?.threads.get(data.forumTopicComment.forumTopicId)?.comments.update(data.forumTopicComment);
        const ThreadComment = cachedTC ?? new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.client, { guildID: data.serverId });
        this.client.emit("forumCommentUpdate", ThreadComment, CachedComment);
    }
    async forumThreadCommentDelete(data) {
        if (this.client.params.waitForCaching)
            await this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        else
            void this.addGuildChannel(data.serverId, data.forumTopicComment.channelId, data.forumTopicComment.forumTopicId);
        const channel = this.client.getChannel(data.serverId, data.forumTopicComment.channelId);
        const cachedTC = channel?.threads.get(data.forumTopicComment.forumTopicId)?.comments.update(data.forumTopicComment);
        const ThreadComment = cachedTC ?? new ForumThreadComment_1.ForumThreadComment(data.forumTopicComment, this.client, { guildID: data.serverId });
        channel?.threads?.get(data.forumTopicComment.forumTopicId)?.comments.delete(ThreadComment.id);
        this.client.emit("forumCommentDelete", ThreadComment);
    }
    async forumThreadLock(data) {
        if (this.client.params.waitForCaching)
            void this.addGuildChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        this.client.emit("forumThreadLock", Thread);
    }
    async forumThreadUnlock(data) {
        if (this.client.params.waitForCaching)
            void this.addGuildChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        else
            void this.addGuildChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        const channel = this.client.getChannel(data.forumTopic.serverId, data.forumTopic.channelId);
        const Thread = channel?.threads.update(data.forumTopic) ?? new ForumThread_1.ForumThread(data.forumTopic, this.client);
        this.client.emit("forumThreadUnlock", Thread);
    }
    async forumThreadReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new ForumThreadReactionInfo_1.ForumThreadReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async forumThreadReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new ForumThreadReactionInfo_1.ForumThreadReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async forumThreadCommentReactionAdd(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new ForumThreadReactionInfo_1.ForumThreadReactionInfo(data, this.client);
        this.client.emit("reactionAdd", ReactionInfo);
    }
    async forumThreadCommentReactionRemove(data) {
        if (data.serverId)
            if (this.client.params.waitForCaching)
                await this.addGuildChannel(data.serverId, data.reaction.channelId);
            else
                void this.addGuildChannel(data.serverId, data.reaction.channelId);
        const ReactionInfo = new ForumThreadReactionInfo_1.ForumThreadReactionInfo(data, this.client);
        this.client.emit("reactionRemove", ReactionInfo);
    }
    async addGuildChannel(guildID, channelID, threadID) {
        const guild = this.client.guilds.get(guildID);
        if (this.client.getChannel(guildID, channelID) === undefined) {
            const channel = await this.client.rest.channels.getChannel(channelID).catch(err => this.client.emit("warn", `Cannot register channel to cache due to: (${String(err)})`));
            if (typeof channel !== "boolean")
                guild?.channels?.add(channel);
        }
        const conditions = this.client.getChannel(guildID, channelID) !== undefined && this.client.getChannel(guildID, channelID)?.threads.get(threadID) === undefined;
        if (guildID && channelID && threadID && conditions) {
            const restThread = await this.client.rest.channels.getForumThread(channelID, threadID).catch(err => this.client.emit("warn", `Cannot register thread to cache due to: (${String(err)})`));
            const channel = guild?.channels.get(channelID);
            if (typeof restThread !== "boolean")
                channel?.threads.add(restThread);
        }
        // const guild = this.client.guilds.get(guildID);
        // const restThread = await this.client.rest.channels.getForumThread(channelID, threadID as number);
        // guild?.channels.get(channelID)?.threads?.add(restThread);
    }
}
exports.ForumThreadHandler = ForumThreadHandler;
//# sourceMappingURL=data:application/json;base64,