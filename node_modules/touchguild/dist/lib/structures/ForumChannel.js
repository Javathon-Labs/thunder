"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumChannel = void 0;
const tslib_1 = require("tslib");
const ForumThread_1 = require("./ForumThread");
const GuildChannel_1 = require("./GuildChannel");
const TypedCollection_1 = tslib_1.__importDefault(require("../util/TypedCollection"));
/** Represents a forum channel. */
class ForumChannel extends GuildChannel_1.GuildChannel {
    /**
     * @param data raw data
     * @param client client
     */
    constructor(data, client) {
        super(data, client);
        this.threads = new TypedCollection_1.default(ForumThread_1.ForumThread, client, client.params.collectionLimits?.threads);
        this.update(data);
    }
    /** Create a thread in this channel.
     * @param options Thread's options including title & content.
     */
    async createThread(options) {
        return this.client.rest.channels.createForumThread(this.id, options);
    }
    /** Edit a thread from this channel.
     * @param threadID ID of a thread.
     * @param options Edit options.
     */
    async editThread(threadID, options) {
        return this.client.rest.channels.editForumThread(this.id, threadID, options);
    }
    /** Delete a thread from this channel.
     * @param threadID ID of a thread.
     */
    async deleteThread(threadID) {
        return this.client.rest.channels.deleteForumThread(this.id, threadID);
    }
    /** Pin a thread.
     * @param threadID ID of a thread.
     */
    async pinThread(threadID) {
        return this.client.rest.channels.pinForumThread(this.id, threadID);
    }
    /** Unpin a thread.
     * @param threadID ID of a thread.
     */
    async unpinThread(threadID) {
        return this.client.rest.channels.unpinForumThread(this.id, threadID);
    }
    /** Lock a thread.
     * @param threadID ID of a thread.
     */
    async lockThread(threadID) {
        return this.client.rest.channels.lockForumThread(this.id, threadID);
    }
    /** Unlock a thread.
     * @param threadID ID of a thread.
     */
    async unlockThread(threadID) {
        return this.client.rest.channels.unlockForumThread(this.id, threadID);
    }
    toJSON() {
        return {
            ...super.toJSON(),
            threads: this.threads.map(thread => thread.toJSON())
        };
    }
}
exports.ForumChannel = ForumChannel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ydW1DaGFubmVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3N0cnVjdHVyZXMvRm9ydW1DaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSwrQ0FBNEM7QUFDNUMsaURBQThDO0FBRTlDLHNGQUFzRDtBQUl0RCxrQ0FBa0M7QUFDbEMsTUFBYSxZQUFhLFNBQVEsMkJBQVk7SUFHMUM7OztPQUdHO0lBQ0gsWUFBWSxJQUFxQixFQUFFLE1BQWM7UUFDN0MsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUkseUJBQWUsQ0FBQyx5QkFBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFpQztRQUNoRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQWdCLEVBQUUsT0FBK0I7UUFDOUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBZ0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQWdCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBZ0I7UUFDOUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQWdCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBZ0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRVEsTUFBTTtRQUNYLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDakIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ3ZELENBQUM7SUFDTixDQUFDO0NBQ0o7QUFyRUQsb0NBcUVDIn0=