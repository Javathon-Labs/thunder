/** @module ListItem */
import { Client } from "./Client";
import { Member } from "./Member";
import { Base } from "./Base";
import { ListItemNoteTypes } from "../types/types";
import { APIListItem, APIMentions, PATCHListItemBody } from "../Constants";
import { JSONListItem } from "../types/json";
/** Represents an item of a "Lists" channel. */
export declare class ListItem extends Base<string> {
    /** Raw data */
    _data: APIListItem;
    /** Guild id */
    guildID: string;
    /** ID of the 'docs' channel. */
    channelID: string;
    /** Content of the doc */
    content: string;
    mentions: APIMentions | null;
    /** When the item was created. */
    createdAt: Date | null;
    /** ID of the member who created the doc. */
    memberID: string;
    /** ID of the webhook that created the list item (if it was created by a webhook) */
    webhookID: string | null;
    /** Timestamp at which the item was updated. */
    editedTimestamp: Date | null;
    /** ID of the member who updated the doc. (if updated) */
    updatedBy: string | null;
    /** The ID of the parent list item if this list item is nested */
    parentListItemID: string | null;
    /** When the list item was marked as "completed". */
    completedAt: Date | null;
    /** ID of the member that completed the item, if completed. */
    completedBy: string | null;
    /**
     * @param data raw data.
     * @param client client.
     */
    constructor(data: APIListItem, client: Client);
    toJSON(): JSONListItem;
    protected update(data: APIListItem): void;
    get note(): ListItemNoteTypes | null;
    /** Retrieve the member who executed this action.
     *
     * Note: If the item has been edited, the updatedBy id will be used to get you the member.
     */
    get member(): Member | Promise<Member>;
    /** Edit this item.
     * @param options Edit options.
     */
    edit(options?: {
        content?: PATCHListItemBody["message"];
        note?: PATCHListItemBody["note"];
    }): Promise<ListItem>;
    /** Delete this item. */
    delete(): Promise<void>;
    /** Set this item as "complete". */
    complete(): Promise<void>;
    /** Set this item as "uncomplete". */
    uncomplete(): Promise<void>;
}
